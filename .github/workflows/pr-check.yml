name: PR Check

on:
  pull_request:
    types: [opened, edited, synchronize, reopened]

permissions:
  contents: read
  pull-requests: write
  issues: write
  checks: write

jobs:
  # PR validation
  validate-pr:
    name: Validate PR
    runs-on: ubuntu-latest

    steps:
      - name: üì• Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: üìù Validate PR title format
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const title = context.payload.pull_request.title;

            // „Çø„Ç§„Éà„É´„ÅÆÊ≠£Ë¶èÂåñÔºàÁ©∫ÁôΩ„ÅØ‰∫ãÂâç„Å´pr-title-fix.yml„Åß‰øÆÊ≠£Ê∏à„ÅøÔºâ
            const normalizedTitle = title.trim().replace(/\s+/g, ' ');

            // Conventional CommitsÂΩ¢Âºè„ÅÆÊ§úË®ºÔºà„Çà„ÇäÂé≥ÂØÜ„Å™„Éë„Çø„Éº„É≥Ôºâ
            const conventionalCommitRegex = /^(feat|fix|docs|style|refactor|perf|test|build|ci|chore|revert)(\([a-z0-9-]+\))?: .+$/;

            // „Çø„Ç§„Éà„É´„ÅÆÂü∫Êú¨Ê§úË®º
            const validations = {
              hasCorrectFormat: conventionalCommitRegex.test(normalizedTitle),
              hasDescription: normalizedTitle.split(':')[1]?.trim().length > 0,
              isNotTooLong: normalizedTitle.length <= 72,
              startsWithLowercase: /^[a-z]/.test(normalizedTitle)
            };

            // Ê§úË®ºÁµêÊûú„ÅÆÈõÜË®à
            const validationErrors = [];

            if (!validations.hasCorrectFormat) {
              validationErrors.push('Conventional CommitsÂΩ¢Âºè„Å´Âæì„Å£„Å¶„ÅÑ„Åæ„Åõ„Çì');
            }

            if (!validations.hasDescription) {
              validationErrors.push('Ë™¨ÊòéÊñá„ÅåÁ©∫„Åæ„Åü„ÅØ‰∏çË∂≥„Åó„Å¶„ÅÑ„Åæ„Åô');
            }

            if (!validations.isNotTooLong) {
              validationErrors.push(`„Çø„Ç§„Éà„É´„ÅåÈï∑„Åô„Åé„Åæ„ÅôÔºà${normalizedTitle.length}ÊñáÂ≠ó„ÄÅÊé®Â•®: 72ÊñáÂ≠ó‰ª•ÂÜÖÔºâ`);
            }

            if (!validations.startsWithLowercase) {
              validationErrors.push('„Çø„Ç§„Éó„ÅØÂ∞èÊñáÂ≠ó„ÅßÂßã„ÇÅ„ÇãÂøÖË¶Å„Åå„ÅÇ„Çä„Åæ„Åô');
            }

            // „Ç®„É©„Éº„Åå„ÅÇ„ÇãÂ†¥Âêà
            if (validationErrors.length > 0) {
              const errorMessage = `‚ùå **PR„Çø„Ç§„Éà„É´„ÅÆÊ§úË®º„Ç®„É©„Éº**\n\n` +
                `**ÁèæÂú®„ÅÆ„Çø„Ç§„Éà„É´**: \`${normalizedTitle}\`\n\n` +
                `**Ê§úÂá∫„Åï„Çå„ÅüÂïèÈ°å**:\n` +
                validationErrors.map(err => `- ${err}`).join('\n') + '\n\n' +
                `**Ê≠£„Åó„ÅÑÂΩ¢Âºè**: \`<type>[(scope)]: <description>\`\n\n` +
                `**Âà©Áî®ÂèØËÉΩ„Å™„Çø„Ç§„Éó**:\n` +
                `- \`feat\`: Êñ∞Ê©üËÉΩ\n` +
                `- \`fix\`: „Éê„Ç∞‰øÆÊ≠£\n` +
                `- \`docs\`: „Éâ„Ç≠„É•„É°„É≥„Éà„ÅÆ„Åø„ÅÆÂ§âÊõ¥\n` +
                `- \`style\`: „Éï„Ç©„Éº„Éû„ÉÉ„Éà„ÅÆÂ§âÊõ¥\n` +
                `- \`refactor\`: „É™„Éï„Ç°„ÇØ„Çø„É™„É≥„Ç∞\n` +
                `- \`perf\`: „Éë„Éï„Ç©„Éº„Éû„É≥„ÇπÊîπÂñÑ\n` +
                `- \`test\`: „ÉÜ„Çπ„Éà„ÅÆËøΩÂä†„Éª‰øÆÊ≠£\n` +
                `- \`build\`: „Éì„É´„Éâ„Ç∑„Çπ„ÉÜ„É†„ÅÆÂ§âÊõ¥\n` +
                `- \`ci\`: CIË®≠ÂÆö„ÅÆÂ§âÊõ¥\n` +
                `- \`chore\`: „Åù„ÅÆ‰ªñ„ÅÆÂ§âÊõ¥\n` +
                `- \`revert\`: „Ç≥„Éü„ÉÉ„Éà„ÅÆÂèñ„ÇäÊ∂à„Åó\n\n` +
                `**„Çø„Ç§„Éà„É´‰æã**:\n` +
                `- \`feat: „É¶„Éº„Ç∂„ÉºË™çË®ºÊ©üËÉΩ„ÅÆËøΩÂä†\`\n` +
                `- \`fix(auth): „É≠„Ç∞„Ç§„É≥„Ç®„É©„Éº„ÅÆ‰øÆÊ≠£\`\n` +
                `- \`docs: API‰ªïÊßòÊõ∏„ÅÆÊõ¥Êñ∞\`\n\n` +
                `Ë©≥Á¥∞„ÅØ[CONTRIBUTING.md](../blob/main/CONTRIBUTING.md)„ÇíÂèÇÁÖß„Åó„Å¶„Åè„Å†„Åï„ÅÑ„ÄÇ`;

              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: context.issue.number,
                body: errorMessage
              });

              core.setFailed(`PR„Çø„Ç§„Éà„É´„ÅÆÊ§úË®º„Å´Â§±Êïó„Åó„Åæ„Åó„Åü: ${validationErrors.join(', ')}`);
              return;
            }

            // „Åô„Åπ„Å¶„ÅÆÊ§úË®º„Çí„Éë„Çπ
            console.log(`‚úÖ PR title is valid: '${normalizedTitle}'`);

      - name: üìù Validate PR title format (backup check)
        if: success()
        uses: amannn/action-semantic-pull-request@v5
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          # „Çø„Ç§„Éà„É´„ÅÆÁ©∫ÁôΩ„ÇíË®±ÂÆπ„Åô„ÇãË®≠ÂÆö
          requireScope: false
          types: |
            feat
            fix
            docs
            style
            refactor
            perf
            test
            build
            ci
            chore
            revert
          # Êó•Êú¨Ë™û„Çø„Ç§„Éà„É´„ÇíË®±ÂèØÔºàConventional CommitsÂΩ¢Âºè„ÅÆ„ÅøÊ§úË®ºÔºâ
          subjectPattern: ^.*$
          subjectPatternError: |
            PR„Çø„Ç§„Éà„É´„ÅØ "type: description" ÂΩ¢Âºè„Åß„ÅÇ„ÇãÂøÖË¶Å„Åå„ÅÇ„Çä„Åæ„Åô„ÄÇ
            ‰æã: "feat: Êñ∞Ê©üËÉΩËøΩÂä†", "fix: „Éê„Ç∞‰øÆÊ≠£"

      - name: üìä Check PR size
        uses: codelytv/pr-size-labeler@v1
        with:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          xs_label: "size/xs"
          xs_max_size: "10"
          s_label: "size/s"
          s_max_size: "100"
          m_label: "size/m"
          m_max_size: "500"
          l_label: "size/l"
          l_max_size: "1000"
          xl_label: "size/xl"

      - name: üè∑Ô∏è Auto-label PR
        uses: actions/labeler@v5
        with:
          repo-token: ${{ secrets.GITHUB_TOKEN }}

  # Code quality check
  code-quality:
    name: Code Quality Check
    runs-on: ubuntu-latest
    env:
      SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}

    steps:
      - name: üì• Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: üìä SonarCloud Scan
        # SONAR_TOKEN„ÅåË®≠ÂÆö„Åï„Çå„Å¶„ÅÑ„ÇãÂ†¥Âêà„ÅÆ„ÅøÂÆüË°åÔºàÁí∞Â¢ÉÂ§âÊï∞„ÅßÂà§ÂÆöÔºâ
        if: env.SONAR_TOKEN != ''
        uses: SonarSource/sonarqube-scan-action@v5.0.0
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        with:
          # SonarCloudË®≠ÂÆöÔºà„Ç™„Éó„Ç∑„Éß„É≥Ôºâ
          args: >
            -Dsonar.projectKey=daishiman_AutoForgeNexus
            -Dsonar.organization=daishiman
            -Dsonar.python.coverage.reportPaths=coverage.xml
            -Dsonar.javascript.lcov.reportPaths=frontend/coverage/lcov.info
            -Dsonar.sources=backend/src,frontend/src
            -Dsonar.tests=backend/tests,frontend/tests
            -Dsonar.exclusions=**/__pycache__/**,**/node_modules/**,**/dist/**,**/build/**

      - name: ‚ö†Ô∏è SonarCloud Skipped
        # SONAR_TOKEN„ÅåË®≠ÂÆö„Åï„Çå„Å¶„ÅÑ„Å™„ÅÑÂ†¥Âêà„ÅÆË≠¶Âëä
        if: env.SONAR_TOKEN == ''
        run: |
          echo "‚ö†Ô∏è SonarCloud scan skipped: SONAR_TOKEN not configured"
          echo "To enable SonarCloud analysis:"
          echo "1. Create a SonarCloud account at https://sonarcloud.io"
          echo "2. Generate a token"
          echo "3. Add SONAR_TOKEN to GitHub repository secrets"

      - name: üîç Check for conflicts
        run: |
          if grep -r "<<<<<<< HEAD" --exclude-dir=.git .; then
            echo "‚ùå Merge conflicts detected!"
            exit 1
          fi

      - name: üîç Check for secrets
        uses: trufflesecurity/trufflehog@main
        with:
          path: ./
          base: ${{ github.event.pull_request.base.sha }}
          head: ${{ github.event.pull_request.head.sha }}
          extra_args: --only-verified --exclude-paths=.trufflehog_ignore

  # Claude Code Review (AI Review)
  claude-review:
    name: Claude Code Review
    runs-on: ubuntu-latest

    steps:
      - name: üì• Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: ü§ñ Prepare Claude Review Context
        id: prepare
        run: |
          # Get changed files
          CHANGED_FILES=$(git diff --name-only ${{ github.event.pull_request.base.sha }} ${{ github.event.pull_request.head.sha }})
          echo "changed_files<<EOF" >> $GITHUB_OUTPUT
          echo "$CHANGED_FILES" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

          # Get diff
          DIFF=$(git diff ${{ github.event.pull_request.base.sha }} ${{ github.event.pull_request.head.sha }})
          echo "diff<<EOF" >> $GITHUB_OUTPUT
          echo "$DIFF" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

      - name: üìù Post Claude Review Comment
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const changedFiles = `${{ steps.prepare.outputs.changed_files }}`;
            const fileCount = changedFiles.split('\n').filter(f => f).length;

            const comment = `## ü§ñ Claude Code Review

            ### üìä PR Summary
            - **Changed Files**: ${fileCount}
            - **Review Status**: Automated review initiated

            ### üîç Review Checklist

            #### Code Quality
            - [ ] SOLID principles compliance
            - [ ] DRY principle adherence
            - [ ] Appropriate abstraction levels
            - [ ] Consistent naming conventions

            #### Security
            - [ ] No exposed secrets or API keys
            - [ ] Input validation present
            - [ ] SQL injection prevention
            - [ ] XSS protection measures

            #### Performance
            - [ ] No O(n¬≤) or worse algorithms
            - [ ] Database queries optimized
            - [ ] No memory leaks detected
            - [ ] Proper async/await usage

            #### Testing
            - [ ] Tests added for new features
            - [ ] Edge cases covered
            - [ ] Coverage threshold met (Backend: 80%, Frontend: 75%)

            #### Documentation
            - [ ] Code comments for complex logic
            - [ ] API documentation updated
            - [ ] README updated if needed

            ### üí° Recommendations
            Based on the automated analysis:
            1. Ensure all test cases pass before merging
            2. Verify that the changes align with the project architecture
            3. Consider the impact on existing features

            ### üìå Note
            This is an automated review by Claude Code. For detailed analysis, please run:
            \`\`\`bash
            /ai:quality:analyze --pr ${{ github.event.pull_request.number }}
            \`\`\`

            ---
            *Generated by Claude Code Review System v1.0*`;

            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
              body: comment
            });

  # Test coverage report
  coverage-report:
    name: Coverage Report
    runs-on: ubuntu-latest

    steps:
      - name: üì• Checkout code
        uses: actions/checkout@v4

      - name: üêç Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.13"

      - name: üü¢ Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "22"

      - name: üìä Generate coverage comment
        uses: py-cov-action/python-coverage-comment-action@v3
        with:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  # Final status
  pr-status:
    name: PR Status Check
    needs: [validate-pr, code-quality, claude-review, coverage-report]
    runs-on: ubuntu-latest
    if: always()

    steps:
      - name: ‚úÖ All checks passed
        if: ${{ !(contains(needs.*.result, 'failure')) }}
        run: |
          echo "‚úÖ All PR checks passed!"
          echo "Ready for manual review and merge."

      - name: ‚ùå Some checks failed
        if: ${{ contains(needs.*.result, 'failure') }}
        run: |
          echo "‚ùå Some PR checks failed!"
          echo "Please fix the issues before merging."
          exit 1
