name: Backend CI/CD Pipeline

on:
  push:
    branches: [main, develop, 'feature/autoforge-*']
    paths:
      - 'backend/**'
      - '.github/workflows/backend-ci.yml'
      - 'requirements*.txt'
      - 'pyproject.toml'
  pull_request:
    branches: [main, develop]
    paths:
      - 'backend/**'
      - '.github/workflows/backend-ci.yml'

env:
  PYTHON_VERSION: '3.13'

jobs:
  # 品質チェック
  quality-check:
    name: Quality Check
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./backend

    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🐍 Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: 'pip'

      - name: 📦 Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install -r requirements-dev.txt

      - name: 🎨 Run Ruff linting
        run: |
          ruff check src/ tests/ --output-format=github

      - name: 🎨 Check Black formatting
        run: |
          black --check src/ tests/

      - name: 🔍 Type checking with mypy
        run: |
          mypy src/ --strict

  # テスト実行
  test:
    name: Test Suite
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./backend

    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🐍 Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: 'pip'

      - name: 📦 Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install -r requirements-dev.txt

      - name: 🧪 Run unit tests with coverage
        run: |
          pytest tests/unit/ \
            --cov=src \
            --cov-report=xml \
            --cov-report=html \
            --cov-report=term \
            --cov-fail-under=80

      - name: 🧪 Run integration tests
        run: |
          pytest tests/integration/ \
            --cov=src \
            --cov-report=xml \
            --cov-append

      - name: 📊 Upload coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          file: ./backend/coverage.xml
          flags: backend
          name: backend-coverage

      - name: 📁 Upload coverage artifacts
        uses: actions/upload-artifact@v4
        with:
          name: backend-coverage-report
          path: backend/htmlcov/

  # セキュリティチェック
  security:
    name: Security Check
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./backend

    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🐍 Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: 🔒 Run Bandit security scan
        run: |
          pip install bandit[toml]
          bandit -r src/ -f github

      - name: 🔒 Check for vulnerabilities with Safety
        run: |
          pip install safety
          safety check --json

  # ドメイン層テスト
  domain-tests:
    name: Domain Layer Tests
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./backend

    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🐍 Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: 'pip'

      - name: 📦 Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install -r requirements-dev.txt

      - name: 🧪 Test Domain Entities
        run: |
          pytest tests/unit/domain/ -v \
            --tb=short \
            --cov=src/domain \
            --cov-report=term

  # Docker ビルド
  docker:
    name: Docker Build
    runs-on: ubuntu-latest
    needs: [quality-check, test]

    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🐳 Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: 🏗️ Build Docker image
        uses: docker/build-push-action@v5
        with:
          context: ./backend
          file: ./backend/Dockerfile
          push: false
          tags: autoforgenexus-backend:${{ github.sha }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  # API仕様生成
  api-spec:
    name: API Specification
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./backend

    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🐍 Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: 'pip'

      - name: 📦 Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: 📄 Generate OpenAPI spec
        run: |
          python -m src.main --generate-openapi > openapi.json

      - name: 📁 Upload OpenAPI spec
        uses: actions/upload-artifact@v4
        with:
          name: openapi-spec
          path: backend/openapi.json

  # パフォーマンステスト
  performance:
    name: Performance Test
    runs-on: ubuntu-latest
    needs: [test]

    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🚀 Run Locust performance test
        run: |
          pip install locust
          cd backend
          # locust -f tests/performance/locustfile.py --headless -u 10 -r 2 -t 30s --host=http://localhost:8000 || true

  # デプロイ準備
  deploy-prep:
    name: Deployment Preparation
    runs-on: ubuntu-latest
    needs: [quality-check, test, security, docker]
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop'

    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 📦 Package for deployment
        run: |
          tar -czf backend-${{ github.sha }}.tar.gz backend/
          echo "Build packaged successfully"

      - name: 📁 Upload deployment package
        uses: actions/upload-artifact@v4
        with:
          name: backend-deployment-package
          path: backend-${{ github.sha }}.tar.gz
          retention-days: 30

  # ステータスチェック
  ci-status:
    name: CI Status
    runs-on: ubuntu-latest
    needs: [quality-check, test, security, domain-tests, docker, api-spec]
    if: always()

    steps:
      - name: ✅ All checks passed
        if: ${{ !(contains(needs.*.result, 'failure')) }}
        run: |
          echo "🎉 Backend CI passed successfully!"
          exit 0

      - name: ❌ Some checks failed
        if: ${{ contains(needs.*.result, 'failure') }}
        run: |
          echo "❌ Backend CI failed!"
          exit 1