name: CI Pipeline

on:
  push:
    branches: [develop, main]
  pull_request:
    branches: [develop, main]
    types: [opened, synchronize, reopened]

env:
  PYTHON_VERSION: '3.13'
  NODE_VERSION: '20'
  PNPM_VERSION: '9'

jobs:
  # ディレクトリ存在チェック
  check-structure:
    name: Check Project Structure
    runs-on: ubuntu-latest
    outputs:
      backend-exists: ${{ steps.check.outputs.backend }}
      frontend-exists: ${{ steps.check.outputs.frontend }}
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🔍 Check directories
        id: check
        run: |
          # Backend存在チェック
          if [ -d "backend" ]; then
            echo "backend=true" >> $GITHUB_OUTPUT
          else
            echo "backend=false" >> $GITHUB_OUTPUT
          fi

          # Frontend実装完了チェック（Phase 5判定）
          # ディレクトリ存在 + package.json + 基本ファイル存在で判定
          if [ -d "frontend" ] && [ -f "frontend/package.json" ] && [ -f "frontend/src/app/layout.tsx" ]; then
            echo "frontend=true" >> $GITHUB_OUTPUT
            echo "✅ Frontend Phase 5 implementation detected"
          else
            echo "frontend=false" >> $GITHUB_OUTPUT
            echo "⏭️ Frontend Phase 5 not ready, skipping frontend CI"
          fi

  # Python/Backend CI
  backend-ci:
    name: Backend CI
    runs-on: ubuntu-latest
    needs: check-structure
    if: needs.check-structure.outputs.backend-exists == 'true'
    defaults:
      run:
        working-directory: ./backend

    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🐍 Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: 'pip'

      - name: 📦 Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install -r requirements-dev.txt

      - name: 🎨 Run Ruff linting
        run: |
          ruff check src/ tests/ --output-format=github

      - name: 🎨 Check Black formatting
        run: |
          black --check src/ tests/

      - name: 🔍 Type checking with mypy
        run: |
          mypy src/ --strict

      - name: 🧪 Run tests with coverage
        run: |
          pytest tests/ \
            --cov=src \
            --cov-report=xml \
            --cov-report=html \
            --cov-report=term \
            --cov-fail-under=80

      - name: 📊 Upload coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          file: ./backend/coverage.xml
          flags: backend
          name: backend-coverage

      - name: 📁 Upload coverage artifacts
        uses: actions/upload-artifact@v4
        with:
          name: backend-coverage-report
          path: backend/htmlcov/

  # TypeScript/Frontend CI
  frontend-ci:
    name: Frontend CI
    runs-on: ubuntu-latest
    needs: check-structure
    if: needs.check-structure.outputs.frontend-exists == 'true'
    defaults:
      run:
        working-directory: ./frontend

    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 📦 Install pnpm
        uses: pnpm/action-setup@v3
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: 🟢 Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'pnpm'
          cache-dependency-path: frontend/pnpm-lock.yaml

      - name: 📦 Install dependencies
        run: pnpm install --frozen-lockfile

      - name: 🎨 Run ESLint
        run: pnpm lint

      - name: 🎨 Check Prettier formatting
        run: pnpm prettier --check .

      - name: 🔍 TypeScript type checking
        run: pnpm type-check

      - name: 🧪 Run tests with coverage
        run: |
          pnpm test:ci --coverage \
            --coverageThreshold='{"global":{"branches":75,"functions":75,"lines":75,"statements":75}}'

      - name: 📊 Upload coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          file: ./frontend/coverage/coverage-final.json
          flags: frontend
          name: frontend-coverage

      - name: 🏗️ Build application
        run: pnpm build

      - name: 📁 Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: frontend-build
          path: frontend/.next/

  # Docker build test
  docker-build:
    name: Docker Build Test
    runs-on: ubuntu-latest
    needs: check-structure
    if: needs.check-structure.outputs.backend-exists == 'true' || needs.check-structure.outputs.frontend-exists == 'true'

    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🐳 Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: 🏗️ Build Backend Docker image
        if: ${{ needs.check-structure.outputs.backend-exists == 'true' }}
        uses: docker/build-push-action@v5
        with:
          context: ./backend
          file: ./backend/Dockerfile
          push: false
          tags: autoforgenexus-backend:ci
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: 🏗️ Build Frontend Docker image
        if: ${{ needs.check-structure.outputs.frontend-exists == 'true' }}
        uses: docker/build-push-action@v5
        with:
          context: ./frontend
          file: ./frontend/Dockerfile
          push: false
          tags: autoforgenexus-frontend:ci
          cache-from: type=gha
          cache-to: type=gha,mode=max

  # Integration tests
  integration-tests:
    name: Integration Tests
    needs: [check-structure]
    if: needs.check-structure.outputs.backend-exists == 'true' && needs.check-structure.outputs.frontend-exists == 'true'
    runs-on: ubuntu-latest

    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🐳 Start services with Docker Compose
        run: |
          docker-compose -f docker-compose.test.yml up -d
          sleep 10

      - name: 🧪 Run integration tests
        run: |
          docker-compose -f docker-compose.test.yml exec -T backend pytest tests/integration/

      - name: 🛑 Stop services
        if: always()
        run: docker-compose -f docker-compose.test.yml down

  # Security scanning
  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest

    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🔒 Run Trivy security scan
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: '.'
          format: 'sarif'
          output: 'trivy-results.sarif'

      - name: 📤 Upload Trivy results to GitHub Security
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: 'trivy-results.sarif'

  # Final status check
  ci-status:
    name: CI Status Check
    needs: [backend-ci, frontend-ci, docker-build, integration-tests, security-scan]
    runs-on: ubuntu-latest
    if: always()

    steps:
      - name: ✅ All CI checks passed
        if: ${{ !(contains(needs.*.result, 'failure')) }}
        run: |
          echo "🎉 All CI checks passed successfully!"
          exit 0

      - name: ❌ CI checks failed
        if: ${{ contains(needs.*.result, 'failure') }}
        run: |
          echo "❌ One or more CI checks failed!"
          exit 1