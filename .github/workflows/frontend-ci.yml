name: Frontend CI/CD Pipeline - Optimized

on:
  push:
    branches: [main, develop, 'feature/autoforge-*']
    paths:
      - 'frontend/**'
      - '.github/workflows/frontend-ci.yml'
      - 'package.json'
      - 'pnpm-workspace.yaml'
  pull_request:
    branches: [main, develop]
    paths:
      - 'frontend/**'
      - '.github/workflows/frontend-ci.yml'

# Global optimization settings
concurrency:
  group: frontend-ci-${{ github.ref }}
  cancel-in-progress: ${{ github.ref != 'refs/heads/main' }}

env:
  NODE_VERSION: '22'
  PNPM_VERSION: '9'

jobs:
  # Shared setup for all jobs
  setup-environment:
    name: 🔧 Setup Environment
    uses: ./.github/workflows/shared-setup-node.yml
    with:
      node-version: '22'
      pnpm-version: '9'
      working-directory: './frontend'
      cache-key-suffix: '-frontend'
      install-playwright: true

  # Parallel quality checks with matrix strategy
  quality-checks:
    name: 🔍 Quality Checks
    runs-on: ubuntu-latest
    needs: setup-environment
    strategy:
      fail-fast: false
      matrix:
        check-type: [lint, format, type-check, build-check]
        include:
          - check-type: lint
            command: 'pnpm lint'
            name: 'ESLint Analysis'
          - check-type: format
            command: 'pnpm prettier --check .'
            name: 'Prettier Format Check'
          - check-type: type-check
            command: 'pnpm type-check'
            name: 'TypeScript Type Check'
          - check-type: build-check
            command: 'pnpm build && npx size-limit || true'
            name: 'Build & Bundle Size Check'

    defaults:
      run:
        working-directory: ./frontend

    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@692973e3d937129bcbf40652eb9f2f61becf3332 # v4.1.7
        with:
          persist-credentials: false

      - name: 📦 Setup pnpm  # 必要最小限のセットアップ
        uses: pnpm/action-setup@fe02b34f77f8bc703788d5817da081398fad5dd2 # v4.0.0
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: 🟢 Setup Node.js  # 必要最小限のセットアップ
        uses: actions/setup-node@1e60f620b9541d16bece96c5465dc8ee9832be0b # v4.0.3
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: 📥 Restore cached dependencies
        uses: actions/cache@0c45773b623bea8c8e75f6c82b208c3cf94ea4f9 # v4.0.2
        with:
          path: |
            frontend/node_modules
            ~/.cache/ms-playwright
          key: node-${{ env.NODE_VERSION }}-pnpm-${{ env.PNPM_VERSION }}-${{ runner.os }}-${{ hashFiles('frontend/pnpm-lock.yaml') }}
          restore-keys: |
            node-${{ env.NODE_VERSION }}-pnpm-${{ env.PNPM_VERSION }}-${{ runner.os }}-

      - name: 🎯 Run ${{ matrix.name }}
        run: ${{ matrix.command }}
        env:
          NODE_ENV: production
          NEXT_TELEMETRY_DISABLED: 1

  # Parallel test execution with matrix
  test-suite:
    name: 🧪 Test Suite
    runs-on: ubuntu-latest
    needs: setup-environment
    strategy:
      fail-fast: false
      matrix:
        test-type: [unit, e2e]
        include:
          - test-type: unit
            command: 'pnpm test:ci --coverage'
            coverage-flag: 'unit'
            artifacts: 'coverage/'
          - test-type: e2e
            command: 'pnpm build && pnpm test:e2e:ci'
            coverage-flag: 'e2e'
            artifacts: 'playwright-report/ test-results/'

    defaults:
      run:
        working-directory: ./frontend

    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@692973e3d937129bcbf40652eb9f2f61becf3332 # v4.1.7
        with:
          persist-credentials: false

      - name: 📦 Setup pnpm  # 必要最小限のセットアップ
        uses: pnpm/action-setup@fe02b34f77f8bc703788d5817da081398fad5dd2 # v4.0.0
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: 🟢 Setup Node.js  # 必要最小限のセットアップ
        uses: actions/setup-node@1e60f620b9541d16bece96c5465dc8ee9832be0b # v4.0.3
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: 📥 Restore cached dependencies
        uses: actions/cache@0c45773b623bea8c8e75f6c82b208c3cf94ea4f9 # v4.0.2
        with:
          path: |
            frontend/node_modules
            ~/.cache/ms-playwright
          key: node-${{ env.NODE_VERSION }}-pnpm-${{ env.PNPM_VERSION }}-${{ runner.os }}-${{ hashFiles('frontend/pnpm-lock.yaml') }}
          restore-keys: |
            node-${{ env.NODE_VERSION }}-pnpm-${{ env.PNPM_VERSION }}-${{ runner.os }}-

      - name: 🧪 Run ${{ matrix.test-type }} tests
        run: ${{ matrix.command }}
        env:
          CI: true
          NODE_ENV: test

      - name: 📊 Upload coverage to Codecov
        if: matrix.test-type == 'unit'
        uses: codecov/codecov-action@4fe8c5f003fae66aa5ebb77cfd3e7bfbbda0b6b0 # v3.1.5
        with:
          file: ./frontend/coverage/coverage-final.json
          flags: frontend-${{ matrix.coverage-flag }}
          name: frontend-${{ matrix.test-type }}-coverage

      - name: 📁 Upload test artifacts
        uses: actions/upload-artifact@834a144ee995460fba8ed112a2fc961b36a5ec5a # v4.3.6
        if: always()
        with:
          name: frontend-${{ matrix.test-type }}-results-${{ github.run_id }}
          path: frontend/${{ matrix.artifacts }}
          retention-days: 7

  # Production build with caching
  production-build:
    name: 🏗️ Production Build
    uses: ./.github/workflows/shared-build-cache.yml
    needs: [quality-checks]
    with:
      build-type: 'frontend'
      working-directory: './frontend'
      build-command: 'pnpm build'
      artifact-paths: |
        frontend/.next/
        frontend/out/
        frontend/build-stats.json
      environment-vars: '{"NODE_ENV": "production", "NEXT_TELEMETRY_DISABLED": "1"}'

  # Performance and optimization audits
  performance-audit:
    name: ⚡ Performance Audit
    runs-on: ubuntu-latest
    needs: [setup-environment, production-build]
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop'
    defaults:
      run:
        working-directory: ./frontend

    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@692973e3d937129bcbf40652eb9f2f61becf3332 # v4.1.7
        with:
          persist-credentials: false

      - name: 📦 Setup pnpm
        uses: pnpm/action-setup@fe02b34f77f8bc703788d5817da081398fad5dd2 # v4.0.0
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: 🟢 Setup Node.js
        uses: actions/setup-node@1e60f620b9541d16bece96c5465dc8ee9832be0b # v4.0.3
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: 📥 Download build artifacts
        uses: actions/download-artifact@fa0a91b85d4f404e444e00e005971372dc801d16 # v4.1.8
        with:
          name: frontend-build-${{ github.run_id }}
          path: frontend/

      - name: 🚀 Start server for Lighthouse
        run: |
          pnpm start &
          sleep 10
          curl -f http://localhost:3000 || exit 1

      - name: 🏗️ Run Lighthouse CI
        uses: treosh/lighthouse-ci-action@12893c83ca13479969b1da83c9b8e36072df8524 # v12.1.0
        with:
          urls: |
            http://localhost:3000
          uploadArtifacts: true
          temporaryPublicStorage: true
          runs: 3
          configPath: './lighthouse.ci.json'

      - name: 📊 Bundle analysis
        run: |
          echo "## 📊 Bundle Analysis" >> $GITHUB_STEP_SUMMARY
          if [ -f .next/analyze/bundle-sizes.json ]; then
            echo "Build size analysis completed" >> $GITHUB_STEP_SUMMARY
          else
            echo "Bundle analysis not available" >> $GITHUB_STEP_SUMMARY
          fi

  # Docker build with optimized caching
  docker-build:
    name: 🐳 Docker Build
    runs-on: ubuntu-latest
    needs: [production-build]
    if: ${{ !failure() }}

    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@692973e3d937129bcbf40652eb9f2f61becf3332 # v4.1.7
        with:
          persist-credentials: false

      - name: 🐳 Setup Docker Buildx
        uses: docker/setup-buildx-action@988b5a0280414f521da01fcc63a27aeeb4b104db # v3.6.1

      - name: 📥 Download build artifacts
        uses: actions/download-artifact@fa0a91b85d4f404e444e00e005971372dc801d16 # v4.1.8
        with:
          name: frontend-build-${{ github.run_id }}
          path: frontend/

      - name: 🏗️ Build Docker image with cache
        uses: docker/build-push-action@4f58ea79222b3b9dc2c8bbdd6debcef730109a75 # v6.9.0
        with:
          context: ./frontend
          file: ./frontend/Dockerfile
          push: false
          tags: autoforgenexus-frontend:${{ github.sha }}
          cache-from: type=gha,scope=frontend
          cache-to: type=gha,scope=frontend,mode=max
          build-args: |
            NODE_VERSION=${{ env.NODE_VERSION }}

  # Deployment preparation
  deployment-prep:
    name: 📦 Deployment Preparation
    runs-on: ubuntu-latest
    needs: [production-build, test-suite, docker-build]
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop'

    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@692973e3d937129bcbf40652eb9f2f61becf3332 # v4.1.7
        with:
          persist-credentials: false

      - name: 📥 Download build artifacts
        uses: actions/download-artifact@fa0a91b85d4f404e444e00e005971372dc801d16 # v4.1.8
        with:
          name: frontend-build-${{ github.run_id }}
          path: frontend/

      - name: 📦 Package for Cloudflare Pages
        run: |
          # Prepare optimized deployment package
          cd frontend
          tar -czf ../frontend-cloudflare-${{ github.sha }}.tar.gz \
            --exclude='node_modules' \
            --exclude='.next/cache' \
            out/

      - name: 📤 Upload deployment package
        uses: actions/upload-artifact@834a144ee995460fba8ed112a2fc961b36a5ec5a # v4.3.6
        with:
          name: frontend-deployment-${{ github.run_id }}
          path: frontend-cloudflare-${{ github.sha }}.tar.gz
          retention-days: 30

  # Comprehensive status check
  ci-status:
    name: 📊 CI Status
    runs-on: ubuntu-latest
    needs: [setup-environment, quality-checks, test-suite, production-build, docker-build]
    if: always()

    steps:
      - name: 📋 Calculate overall status
        id: status
        run: |
          # Check if any critical jobs failed
          CRITICAL_JOBS=("setup-environment" "quality-checks" "test-suite" "production-build")
          FAILED_JOBS=""

          for job in "${CRITICAL_JOBS[@]}"; do
            if [[ "${{ toJSON(needs) }}" =~ "$job".*"failure" ]]; then
              FAILED_JOBS="$FAILED_JOBS $job"
            fi
          done

          if [ -z "$FAILED_JOBS" ]; then
            echo "status=success" >> $GITHUB_OUTPUT
            echo "message=All critical checks passed! 🎉" >> $GITHUB_OUTPUT
          else
            echo "status=failure" >> $GITHUB_OUTPUT
            echo "message=Critical jobs failed:$FAILED_JOBS ❌" >> $GITHUB_OUTPUT
          fi

      - name: 📊 Create status summary
        run: |
          echo "## 🔍 Frontend CI/CD Status" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "| Job | Status |" >> $GITHUB_STEP_SUMMARY
          echo "|-----|--------|" >> $GITHUB_STEP_SUMMARY
          echo "| Environment Setup | ${{ needs.setup-environment.result == 'success' && '✅' || '❌' }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Quality Checks | ${{ needs.quality-checks.result == 'success' && '✅' || '❌' }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Test Suite | ${{ needs.test-suite.result == 'success' && '✅' || '❌' }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Production Build | ${{ needs.production-build.result == 'success' && '✅' || '❌' }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Docker Build | ${{ needs.docker-build.result == 'success' && '✅' || '❌' }} |" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Overall Status**: ${{ steps.status.outputs.message }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Optimizations Applied**:" >> $GITHUB_STEP_SUMMARY
          echo "- ✅ Shared environment setup (eliminates 9 dependency duplications)" >> $GITHUB_STEP_SUMMARY
          echo "- ✅ Parallel quality checks with matrix strategy" >> $GITHUB_STEP_SUMMARY
          echo "- ✅ Parallel test execution (unit + E2E)" >> $GITHUB_STEP_SUMMARY
          echo "- ✅ Shared build cache workflow" >> $GITHUB_STEP_SUMMARY
          echo "- ✅ Docker layer caching optimization" >> $GITHUB_STEP_SUMMARY
          echo "- ✅ Artifact-based dependency sharing" >> $GITHUB_STEP_SUMMARY

      - name: ✅ Success
        if: steps.status.outputs.status == 'success'
        run: |
          echo "${{ steps.status.outputs.message }}"
          exit 0

      - name: ❌ Failure
        if: steps.status.outputs.status == 'failure'
        run: |
          echo "${{ steps.status.outputs.message }}"
          exit 1