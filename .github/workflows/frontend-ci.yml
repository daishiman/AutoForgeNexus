name: Frontend CI/CD Pipeline

on:
  push:
    branches: [main, develop, 'feature/autoforge-*']
    paths:
      - 'frontend/**'
      - '.github/workflows/frontend-ci.yml'
      - 'package.json'
      - 'pnpm-workspace.yaml'
  pull_request:
    branches: [main, develop]
    paths:
      - 'frontend/**'
      - '.github/workflows/frontend-ci.yml'

env:
  NODE_VERSION: '22'
  PNPM_VERSION: '9.15.9'

jobs:
  # 品質チェック
  quality-check:
    name: Quality Check
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./frontend

    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 📦 Install pnpm
        uses: pnpm/action-setup@v4
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: 🟢 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'pnpm'
          cache-dependency-path: frontend/pnpm-lock.yaml

      - name: 📦 Install dependencies
        run: pnpm install --frozen-lockfile

      - name: 🎨 Lint with ESLint
        run: pnpm lint

      - name: 🎨 Format check with Prettier
        run: pnpm prettier --check .

      - name: 🔍 Type check with TypeScript
        run: pnpm type-check

      - name: 📊 Bundle size analysis
        run: |
          pnpm build
          npx size-limit || true

  # テスト実行
  test:
    name: Test Suite
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./frontend

    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 📦 Install pnpm
        uses: pnpm/action-setup@v4
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: 🟢 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'pnpm'
          cache-dependency-path: frontend/pnpm-lock.yaml

      - name: 📦 Install dependencies
        run: pnpm install --frozen-lockfile

      - name: 🧪 Run unit tests
        run: pnpm test:ci --coverage

      - name: 📊 Upload coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          file: ./frontend/coverage/coverage-final.json
          flags: frontend
          name: frontend-coverage

  # E2Eテスト
  e2e:
    name: E2E Tests
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./frontend

    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 📦 Install pnpm
        uses: pnpm/action-setup@v4
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: 🟢 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'pnpm'
          cache-dependency-path: frontend/pnpm-lock.yaml

      - name: 📦 Install dependencies
        run: pnpm install --frozen-lockfile

      - name: 🎭 Install Playwright browsers
        run: npx playwright install --with-deps chromium

      - name: 🏗️ Build application
        run: pnpm build

      - name: 🧪 Run E2E tests
        run: pnpm test:e2e:ci

      - name: 📁 Upload test results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: playwright-report
          path: frontend/playwright-report/
          retention-days: 7

  # ビルド
  build:
    name: Production Build
    runs-on: ubuntu-latest
    needs: [quality-check, test]
    defaults:
      run:
        working-directory: ./frontend

    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 📦 Install pnpm
        uses: pnpm/action-setup@v4
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: 🟢 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'pnpm'
          cache-dependency-path: frontend/pnpm-lock.yaml

      - name: 📦 Install dependencies
        run: pnpm install --frozen-lockfile

      - name: 🏗️ Build with Turbopack
        run: pnpm build
        env:
          NODE_ENV: production
          NEXT_TELEMETRY_DISABLED: 1

      - name: 📊 Analyze bundle
        run: |
          npx --yes @next/bundle-analyzer@latest || true

      - name: 📁 Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: frontend-build
          path: |
            frontend/.next/
            frontend/out/
          retention-days: 7

  # Lighthouse CI
  lighthouse:
    name: Performance Audit
    runs-on: ubuntu-latest
    needs: build
    defaults:
      run:
        working-directory: ./frontend

    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 📦 Install pnpm
        uses: pnpm/action-setup@v4
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: 🟢 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'pnpm'
          cache-dependency-path: frontend/pnpm-lock.yaml

      - name: 📦 Install dependencies
        run: pnpm install --frozen-lockfile

      - name: 📥 Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: frontend-build
          path: frontend/

      - name: 🚀 Start server
        run: |
          pnpm start &
          npx wait-on http://localhost:3000

      - name: 🏗️ Run Lighthouse CI
        uses: treosh/lighthouse-ci-action@v10
        with:
          urls: |
            http://localhost:3000
          uploadArtifacts: true
          temporaryPublicStorage: true
          runs: 3

  # Docker ビルド
  docker:
    name: Docker Build
    runs-on: ubuntu-latest
    needs: build

    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🐳 Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: 🏗️ Build Docker image
        uses: docker/build-push-action@v5
        with:
          context: ./frontend
          file: ./frontend/Dockerfile
          push: false
          tags: autoforgenexus-frontend:${{ github.sha }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          build-args: |
            NODE_VERSION=22

  # デプロイ準備
  deploy-prep:
    name: Deployment Preparation
    runs-on: ubuntu-latest
    needs: [build, docker, e2e]
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop'

    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 📥 Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: frontend-build
          path: frontend/

      - name: 📦 Package for deployment
        run: |
          tar -czf frontend-${{ github.sha }}.tar.gz frontend/.next frontend/out
          echo "Build packaged successfully"

      - name: 📁 Upload deployment package
        uses: actions/upload-artifact@v4
        with:
          name: deployment-package
          path: frontend-${{ github.sha }}.tar.gz
          retention-days: 30

  # ステータスチェック
  ci-status:
    name: CI Status
    runs-on: ubuntu-latest
    needs: [quality-check, test, e2e, build, lighthouse, docker]
    if: always()

    steps:
      - name: ✅ All checks passed
        if: ${{ !(contains(needs.*.result, 'failure')) }}
        run: |
          echo "🎉 Frontend CI passed successfully!"
          exit 0

      - name: ❌ Some checks failed
        if: ${{ contains(needs.*.result, 'failure') }}
        run: |
          echo "❌ Frontend CI failed!"
          exit 1