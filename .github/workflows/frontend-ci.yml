name: Frontend CI/CD Pipeline - Optimized

on:
  push:
    branches: [main, develop, "feature/autoforge-*"]
    paths:
      - "frontend/**"
      - ".github/workflows/frontend-ci.yml"
      - "package.json"
      - "pnpm-workspace.yaml"
  pull_request:
    branches: [main, develop]
    paths:
      - "frontend/**"
      - ".github/workflows/frontend-ci.yml"

# Global optimization settings
concurrency:
  group: frontend-ci-${{ github.ref }}
  cancel-in-progress: ${{ github.ref != 'refs/heads/main' }}

permissions:
  contents: read
  issues: write
  pull-requests: write
  actions: read
  checks: write

env:
  NODE_VERSION: "22"
  PNPM_VERSION: "9"

jobs:
  # ========== Phase検証ジョブ（Phase 3追加） ==========
  validate-phase:
    name: 📋 Phase検証
    runs-on: ubuntu-latest
    outputs:
      phase: ${{ steps.check.outputs.phase }}
      frontend-ready: ${{ steps.check.outputs.frontend-ready }}
      run-quality-checks: ${{ steps.check.outputs.run-quality-checks }}
      run-tests: ${{ steps.check.outputs.run-tests }}
      run-build: ${{ steps.check.outputs.run-build }}
      run-performance: ${{ steps.check.outputs.run-performance }}

    steps:
      - name: 📥 コードのチェックアウト
        uses: actions/checkout@692973e3d937129bcbf40652eb9f2f61becf3332 # v4.1.7
        with:
          persist-credentials: false

      - name: 🔍 Phase状態とフロントエンド環境準備チェック
        id: check
        run: |
          # Phase環境変数確認（デフォルト: 3）
          PHASE="${{ vars.CURRENT_PHASE || '3' }}"
          echo "phase=${PHASE}" >> $GITHUB_OUTPUT
          echo "::notice::📊 現在のPhase: ${PHASE}"

          # フロントエンド環境チェック
          if [ -f "frontend/package.json" ] && [ -f "frontend/pnpm-lock.yaml" ]; then
            echo "frontend-ready=true" >> $GITHUB_OUTPUT
            echo "::notice::✅ フロントエンド環境を検出しました (Phase ${PHASE})"
          else
            echo "frontend-ready=false" >> $GITHUB_OUTPUT
            echo "::warning::⚠️ フロントエンド環境が未準備です (Phase 5+が必要)"
            echo "::warning::📋 必要なファイル: frontend/package.json, frontend/pnpm-lock.yaml"
          fi

          # Phase別実行制御フラグ設定
          if [ "$PHASE" -ge 3 ]; then
            echo "run-quality-checks=true" >> $GITHUB_OUTPUT
            echo "run-build=true" >> $GITHUB_OUTPUT
            echo "::notice::✅ Phase ${PHASE}: 品質チェックとビルドを有効化"
          else
            echo "run-quality-checks=false" >> $GITHUB_OUTPUT
            echo "run-build=false" >> $GITHUB_OUTPUT
            echo "::notice::⏭️ Phase ${PHASE}: 品質チェックとビルドをスキップ (Phase 3+が必要)"
          fi

          if [ "$PHASE" -ge 5 ]; then
            echo "run-tests=true" >> $GITHUB_OUTPUT
            echo "run-performance=true" >> $GITHUB_OUTPUT
            echo "::notice::✅ Phase ${PHASE}: テストとパフォーマンス監査を有効化"
          else
            echo "run-tests=false" >> $GITHUB_OUTPUT
            echo "run-performance=false" >> $GITHUB_OUTPUT
            echo "::notice::⏭️ Phase ${PHASE}: テストとパフォーマンス監査をスキップ (Phase 5+が必要)"
          fi

      - name: 📊 Phase検証サマリー作成
        run: |
          echo "## 📋 Phase検証サマリー" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "| 項目 | 状態 |" >> $GITHUB_STEP_SUMMARY
          echo "|------|--------|" >> $GITHUB_STEP_SUMMARY
          echo "| **現在のPhase** | Phase ${{ steps.check.outputs.phase }} |" >> $GITHUB_STEP_SUMMARY
          echo "| **フロントエンド環境** | ${{ steps.check.outputs.frontend-ready == 'true' && '✅ 準備完了' || '❌ 未準備 (Phase 5+が必要)' }} |" >> $GITHUB_STEP_SUMMARY
          echo "| **品質チェック** | ${{ steps.check.outputs.run-quality-checks == 'true' && '✅ 有効' || '⏭️ スキップ' }} |" >> $GITHUB_STEP_SUMMARY
          echo "| **ビルド** | ${{ steps.check.outputs.run-build == 'true' && '✅ 有効' || '⏭️ スキップ' }} |" >> $GITHUB_STEP_SUMMARY
          echo "| **テスト** | ${{ steps.check.outputs.run-tests == 'true' && '✅ 有効' || '⏭️ スキップ (Phase 5+が必要)' }} |" >> $GITHUB_STEP_SUMMARY
          echo "| **パフォーマンス監査** | ${{ steps.check.outputs.run-performance == 'true' && '✅ 有効' || '⏭️ スキップ (Phase 5+が必要)' }} |" >> $GITHUB_STEP_SUMMARY
          echo "| **Dockerビルド** | ${{ steps.check.outputs.phase >= 5 && '✅ 有効 (Phase 5+)' || '⏭️ スキップ (Phase 5+が必要)' }} |" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### 📚 Phase定義" >> $GITHUB_STEP_SUMMARY
          echo "- **Phase 1-2**: インフラ構築（フロントエンドCI/CDスキップ）" >> $GITHUB_STEP_SUMMARY
          echo "- **Phase 3-4**: 基本検証（lint、型チェック、ビルド検証のみ、Dockerビルドなし）" >> $GITHUB_STEP_SUMMARY
          echo "- **Phase 5+**: 完全なCI/CDパイプライン（テスト・パフォーマンス監査・Dockerビルド有効）" >> $GITHUB_STEP_SUMMARY

  # Shared setup for all jobs
  setup-environment:
    name: 🔧 Setup Environment
    needs: validate-phase
    if: |
      needs.validate-phase.outputs.frontend-ready == 'true' &&
      needs.validate-phase.outputs.run-quality-checks == 'true'
    uses: ./.github/workflows/shared-setup-node.yml
    with:
      node-version: "22"
      pnpm-version: "9"
      working-directory: "./frontend"
      cache-key-suffix: "-frontend"
      install-playwright: true

  # Parallel quality checks with matrix strategy
  quality-checks:
    name: 🔍 Quality Checks
    runs-on: ubuntu-latest
    needs: [validate-phase, setup-environment]
    if: |
      !failure() &&
      needs.validate-phase.outputs.frontend-ready == 'true' &&
      needs.validate-phase.outputs.run-quality-checks == 'true'
    strategy:
      fail-fast: false
      matrix:
        check-type: [lint, type-check]
        include:
          - check-type: lint
            command: "pnpm lint && pnpm prettier --check ."
            name: "ESLint + Prettier"
          - check-type: type-check
            command: "pnpm type-check"
            name: "TypeScript Type Check"

    defaults:
      run:
        working-directory: ./frontend

    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@692973e3d937129bcbf40652eb9f2f61becf3332 # v4.1.7
        with:
          persist-credentials: false

      - name: 📦 Setup pnpm
        uses: pnpm/action-setup@v2  # v2 = 公式推奨安定版
        with:
          version: 9
          run_install: false

      - name: 🟢 Setup Node.js
        uses: actions/setup-node@1e60f620b9541d16bece96c5465dc8ee9832be0b # v4.0.3
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: "pnpm"
          cache-dependency-path: "./frontend/pnpm-lock.yaml"

      - name: 📦 Get pnpm store directory
        shell: bash
        run: |
          echo "STORE_PATH=$(pnpm store path --silent)" >> $GITHUB_ENV

      - name: 💾 Cache pnpm store
        uses: actions/cache@v4
        with:
          path: ${{ env.STORE_PATH }}
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('./frontend/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store-

      - name: 🔍 Pre-flight environment validation
        run: |
          echo "::notice::🔍 Validating CI environment..."
          for cmd in node npm pnpm; do
            command -v $cmd &> /dev/null || { echo "::error::❌ $cmd NOT FOUND"; exit 1; }
            echo "::notice::✅ $cmd: $($cmd --version)"
          done
          echo "::notice::✅ Environment validated"

      - name: 📦 Install dependencies
        run: |
          echo "::notice::Installing frontend dependencies (pnpm cache enabled)"
          pnpm install --frozen-lockfile
        timeout-minutes: 5

      - name: 🎯 Run ${{ matrix.name }}
        run: ${{ matrix.command }}
        timeout-minutes: 5
        env:
          NODE_ENV: production
          NEXT_TELEMETRY_DISABLED: 1

  # Parallel test execution with matrix
  test-suite:
    name: 🧪 Test Suite
    runs-on: ubuntu-latest
    needs: [validate-phase, setup-environment]
    if: |
      !failure() &&
      needs.validate-phase.outputs.frontend-ready == 'true' &&
      needs.validate-phase.outputs.run-tests == 'true'
    strategy:
      fail-fast: false
      matrix:
        test-type: [unit, e2e]
        include:
          - test-type: unit
            command: "pnpm test:ci --coverage"
            coverage-flag: "unit"
            artifacts: "coverage/"
          - test-type: e2e
            command: "pnpm build && pnpm test:e2e:ci"
            coverage-flag: "e2e"
            artifacts: "playwright-report/ test-results/"

    defaults:
      run:
        working-directory: ./frontend

    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@692973e3d937129bcbf40652eb9f2f61becf3332 # v4.1.7
        with:
          persist-credentials: false

      - name: 📦 Setup pnpm
        uses: pnpm/action-setup@v2  # v2 = 公式推奨安定版
        with:
          version: 9
          run_install: false

      - name: 🟢 Setup Node.js
        uses: actions/setup-node@1e60f620b9541d16bece96c5465dc8ee9832be0b # v4.0.3
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: "pnpm"
          cache-dependency-path: "./frontend/pnpm-lock.yaml"

      - name: 📦 Install dependencies
        run: |
          echo "::notice::Installing frontend dependencies for ${{ matrix.test-type }} tests"
          pnpm install --frozen-lockfile
        timeout-minutes: 5

      - name: 💾 Cache Playwright browsers
        if: matrix.test-type == 'e2e'
        uses: actions/cache@v4
        with:
          path: ~/.cache/ms-playwright
          key: playwright-${{ runner.os }}-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            playwright-${{ runner.os }}-

      - name: 🎭 Install Playwright browsers
        if: matrix.test-type == 'e2e'
        run: pnpm exec playwright install --with-deps chromium

      - name: 🧪 Run ${{ matrix.test-type }} tests
        run: ${{ matrix.command }}
        timeout-minutes: ${{ matrix.test-type == 'e2e' && 20 || 10 }}
        env:
          CI: true
          NODE_ENV: test

      - name: 📊 Verify coverage threshold
        if: matrix.test-type == 'unit'
        run: |
          # カバレッジ閾値検証（フロントエンド: 75%）
          if [ -f coverage/coverage-summary.json ]; then
            COVERAGE=$(jq '.total.lines.pct' coverage/coverage-summary.json)
            THRESHOLD=75

            echo "::notice::📊 Coverage: ${COVERAGE}% (Threshold: ${THRESHOLD}%)"

            if (( $(echo "$COVERAGE < $THRESHOLD" | bc -l) )); then
              echo "::error::❌ Coverage ${COVERAGE}% below threshold ${THRESHOLD}%"
              exit 1
            fi

            echo "::notice::✅ Coverage ${COVERAGE}% meets threshold ${THRESHOLD}%"
          else
            echo "::warning::⚠️ Coverage report not found, skipping threshold check"
          fi

      - name: 📊 Upload coverage to Codecov
        if: matrix.test-type == 'unit' && always()
        uses: codecov/codecov-action@4fe8c5f003fae66aa5ebb77cfd3e7bfbbda0b6b0 # v3.1.5
        with:
          file: ./frontend/coverage/coverage-final.json
          flags: frontend-${{ matrix.coverage-flag }}
          name: frontend-${{ matrix.test-type }}-coverage

      - name: 📁 Upload test artifacts
        uses: actions/upload-artifact@834a144ee995460fba8ed112a2fc961b36a5ec5a # v4.3.6
        if: always()
        with:
          name: frontend-${{ matrix.test-type }}-results-${{ github.run_id }}
          path: frontend/${{ matrix.artifacts }}
          retention-days: 7

  # Production build with caching
  production-build:
    name: 🏗️ Production Build
    uses: ./.github/workflows/shared-build-cache.yml
    needs: [validate-phase, quality-checks]
    if: |
      !failure() &&
      needs.validate-phase.outputs.frontend-ready == 'true' &&
      needs.validate-phase.outputs.run-build == 'true'
    with:
      build-type: "frontend"
      working-directory: "./frontend"
      build-command: "pnpm build"
      artifact-paths: |
        frontend/.next/
        frontend/out/
        frontend/build-stats.json
      environment-vars: '{"NODE_ENV": "production", "NEXT_TELEMETRY_DISABLED": "1"}'

  # Performance and optimization audits
  performance-audit:
    name: ⚡ Performance Audit
    runs-on: ubuntu-latest
    needs: [validate-phase, setup-environment, production-build]
    if: |
      !failure() &&
      needs.validate-phase.outputs.frontend-ready == 'true' &&
      needs.validate-phase.outputs.run-performance == 'true' &&
      (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop')
    defaults:
      run:
        working-directory: ./frontend

    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@692973e3d937129bcbf40652eb9f2f61becf3332 # v4.1.7
        with:
          persist-credentials: false

      - name: 📦 Setup pnpm
        uses: pnpm/action-setup@v2  # v2 = 公式推奨安定版
        with:
          version: 9
          run_install: false

      - name: 🟢 Setup Node.js
        uses: actions/setup-node@1e60f620b9541d16bece96c5465dc8ee9832be0b # v4.0.3
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: 📥 Download build artifacts
        uses: actions/download-artifact@fa0a91b85d4f404e444e00e005971372dc801d16 # v4.1.8
        with:
          name: frontend-build-${{ github.run_id }}
          path: frontend/

      - name: 🚀 Start server for Lighthouse
        run: |
          pnpm start &
          sleep 10
          curl -f http://localhost:3000 || exit 1

      - name: 🏗️ Run Lighthouse CI
        uses: treosh/lighthouse-ci-action@03becbfc543944dd6e7534f7ff768abb8a296826 # v11.4.0
        with:
          urls: |
            http://localhost:3000
          uploadArtifacts: true
          temporaryPublicStorage: true
          runs: 3
          configPath: "./lighthouse.ci.json"

      - name: 📊 Bundle analysis
        run: |
          echo "## 📊 Bundle Analysis" >> $GITHUB_STEP_SUMMARY
          if [ -f .next/analyze/bundle-sizes.json ]; then
            echo "Build size analysis completed" >> $GITHUB_STEP_SUMMARY
          else
            echo "Bundle analysis not available" >> $GITHUB_STEP_SUMMARY
          fi

  # Note: Docker build removed - Cloudflare Pages uses static deployment
  # Frontend deployed via: wrangler pages deploy frontend/out
  # No Docker container needed in production environment

  # Deployment preparation
  deployment-prep:
    name: 📦 Deployment Preparation
    runs-on: ubuntu-latest
    needs: [validate-phase, production-build, test-suite, docker-build]
    if: |
      !failure() &&
      needs.validate-phase.outputs.frontend-ready == 'true' &&
      needs.validate-phase.outputs.run-build == 'true' &&
      (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop')

    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@692973e3d937129bcbf40652eb9f2f61becf3332 # v4.1.7
        with:
          persist-credentials: false

      - name: 📥 Download build artifacts
        uses: actions/download-artifact@fa0a91b85d4f404e444e00e005971372dc801d16 # v4.1.8
        with:
          name: frontend-build-${{ github.run_id }}
          path: frontend/

      - name: 📦 Package for Cloudflare Pages
        run: |
          # Prepare optimized deployment package
          cd frontend
          tar -czf ../frontend-cloudflare-${{ github.sha }}.tar.gz \
            --exclude='node_modules' \
            --exclude='.next/cache' \
            out/

      - name: 📤 Upload deployment package
        uses: actions/upload-artifact@834a144ee995460fba8ed112a2fc961b36a5ec5a # v4.3.6
        with:
          name: frontend-deployment-${{ github.run_id }}
          path: frontend-cloudflare-${{ github.sha }}.tar.gz
          retention-days: 30

  # Comprehensive status check
  ci-status:
    name: 📊 CI Status
    runs-on: ubuntu-latest
    needs:
      [
        validate-phase,
        setup-environment,
        quality-checks,
        test-suite,
        production-build,
        docker-build,
      ]
    if: always()

    steps:
      - name: 📋 Calculate overall status
        id: status
        run: |
          # Check if any critical jobs failed
          CRITICAL_JOBS=("setup-environment" "quality-checks" "production-build")
          FAILED_JOBS=""
          for job in "${CRITICAL_JOBS[@]}"; do
            if [[ "${{ toJSON(needs) }}" =~ "$job".*"failure" ]]; then
              FAILED_JOBS="$FAILED_JOBS $job"
            fi
          done
          if [ -z "$FAILED_JOBS" ]; then
            echo "status=success" >> $GITHUB_OUTPUT
            echo "message=All critical checks passed! 🎉" >> $GITHUB_OUTPUT
          else
            echo "status=failure" >> $GITHUB_OUTPUT
            echo "message=Critical jobs failed:$FAILED_JOBS ❌" >> $GITHUB_OUTPUT
          fi

      - name: 📊 Create status summary
        run: |
          echo "## 🔍 Frontend CI/CD Status" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "| Job | Status |" >> $GITHUB_STEP_SUMMARY
          echo "|-----|--------|" >> $GITHUB_STEP_SUMMARY
          echo "| Environment Setup | ${{ needs.setup-environment.result == 'success' && '✅' || '❌' }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Quality Checks | ${{ needs.quality-checks.result == 'success' && '✅' || needs.quality-checks.result == 'skipped' && '⏭️' || '❌' }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Test Suite | ${{ needs.test-suite.result == 'success' && '✅' || needs.test-suite.result == 'skipped' && '⏭️' || '❌' }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Production Build | ${{ needs.production-build.result == 'success' && '✅' || needs.production-build.result == 'skipped' && '⏭️' || '❌' }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Docker Build | ${{ needs.docker-build.result == 'success' && '✅' || needs.docker-build.result == 'skipped' && '⏭️' || '❌' }} |" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Overall Status**: ${{ steps.status.outputs.message }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Optimizations Applied**:" >> $GITHUB_STEP_SUMMARY
          echo "- ✅ Phase-aware execution (smart job skipping based on implementation status)" >> $GITHUB_STEP_SUMMARY
          echo "- ✅ Shared environment setup (eliminates 9 dependency duplications)" >> $GITHUB_STEP_SUMMARY
          echo "- ✅ Parallel quality checks with matrix strategy" >> $GITHUB_STEP_SUMMARY
          echo "- ✅ Parallel test execution (unit + E2E)" >> $GITHUB_STEP_SUMMARY
          echo "- ✅ Shared build cache workflow" >> $GITHUB_STEP_SUMMARY
          echo "- ✅ Docker layer caching optimization (Phase 5+)" >> $GITHUB_STEP_SUMMARY
          echo "- ✅ Artifact-based dependency sharing" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Phase 3-4 Mode**: Early quality validation (lint, type-check, build verification, Docker build skipped)" >> $GITHUB_STEP_SUMMARY
          echo "**Phase 5+ Mode**: Full CI/CD pipeline (tests, performance audit, Docker build, deployment)" >> $GITHUB_STEP_SUMMARY

      - name: ✅ Success
        if: steps.status.outputs.status == 'success'
        run: |
          echo "${{ steps.status.outputs.message }}"
          exit 0

      - name: ❌ Failure
        if: steps.status.outputs.status == 'failure'
        run: |
          echo "${{ steps.status.outputs.message }}"
          exit 1
