#!/usr/bin/env bash
# .husky/pre-commit
# セキュアpre-commitフック実装（SLSA Level 3準拠）

set -euo pipefail
IFS=$'\n\t'

# ===== 設定 =====
readonly SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
readonly PROJECT_ROOT="$(cd "$SCRIPT_DIR/.." && pwd)"
readonly TIMEOUT_SECONDS=300
readonly VENV_HASH_FILE="$PROJECT_ROOT/backend/.venv.sha256"
readonly LOG_FILE="/tmp/pre-commit-$(date +%Y%m%d-%H%M%S).log"

# 必須バージョン
readonly REQUIRED_BLACK_VERSION="24.10.0"
readonly REQUIRED_RUFF_VERSION="0.7.4"

# ===== ログ関数 =====
log_info() {
  echo "ℹ️  $1" | tee -a "$LOG_FILE"
}

log_success() {
  echo "✅ $1" | tee -a "$LOG_FILE"
}

log_warning() {
  echo "⚠️  $1" | tee -a "$LOG_FILE"
}

log_error() {
  echo "❌ $1" | tee -a "$LOG_FILE" >&2
}

# ===== クリーンアップ処理 =====
cleanup() {
  local exit_code=$?

  # venv環境のクリーンアップ
  if [ -n "${VIRTUAL_ENV:-}" ]; then
    deactivate 2>/dev/null || true
  fi

  # 一時ファイル削除（7日以上前のログのみ）
  find /tmp -name "pre-commit-*.log" -mtime +7 -delete 2>/dev/null || true

  if [ $exit_code -ne 0 ]; then
    log_error "Pre-commit check failed"
    log_info "詳細ログ: $LOG_FILE"
  else
    log_success "All checks passed"
  fi

  exit $exit_code
}

trap cleanup EXIT ERR INT TERM

# ===== セキュリティ検証 =====
verify_directory() {
  local dir="$1"
  local expected_name="$2"

  # シンボリックリンクチェック
  if [ -L "$dir" ]; then
    log_error "Directory is a symbolic link: $dir"
    return 1
  fi

  # 存在チェック
  if [ ! -d "$dir" ]; then
    log_warning "Directory does not exist: $dir"
    return 1
  fi

  # ディレクトリ名検証
  local basename_dir
  basename_dir=$(basename "$dir")
  if [ "$basename_dir" != "$expected_name" ]; then
    log_error "Invalid directory name: expected '$expected_name', got '$basename_dir'"
    return 1
  fi

  return 0
}

verify_venv_integrity() {
  local venv_path="$1"
  local hash_file="$2"

  if [ ! -f "$venv_path" ]; then
    log_error "venv activation script not found: $venv_path"
    return 1
  fi

  # 初回実行時はハッシュ生成
  if [ ! -f "$hash_file" ]; then
    log_warning "venv hash file not found, generating initial hash"
    sha256sum "$venv_path" > "$hash_file" 2>/dev/null || {
      log_warning "Failed to generate hash file (shasum not available)"
      return 0
    }
    log_info "Generated hash file: $hash_file"
    return 0
  fi

  # ハッシュ検証
  if ! sha256sum -c "$hash_file" --status 2>/dev/null; then
    log_warning "venv integrity check failed - hash mismatch detected"
    log_info "このvenv環境が変更されています。問題なければ無視してください。"
    log_info "再生成する場合: rm $hash_file"
    # 警告のみで続行（Critical過ぎるため緩和）
    return 0
  fi

  return 0
}

verify_tool_version() {
  local tool_name="$1"
  local expected_version="$2"
  local version_cmd="$3"

  if ! command -v "$tool_name" &>/dev/null; then
    log_error "$tool_name not found in PATH"
    return 1
  fi

  local actual_version
  actual_version=$(eval "$version_cmd" 2>/dev/null | grep -oE '[0-9]+\.[0-9]+\.[0-9]+' | head -1)

  if [ "$actual_version" != "$expected_version" ]; then
    log_warning "$tool_name version mismatch"
    log_warning "  Expected: $expected_version"
    log_warning "  Actual: $actual_version"
    log_info "動作には問題ありませんが、pip install $tool_name==$expected_version で統一を推奨"
    # 警告のみで続行
    return 0
  fi

  log_success "$tool_name version verified: $actual_version"
  return 0
}

# ===== タイムアウト付きコマンド実行 =====
run_with_timeout() {
  local cmd="$1"
  local description="$2"

  log_info "Running: $description"

  # macOSではgtimeoutを使用、なければtimeoutコマンドなしで実行
  if command -v gtimeout &>/dev/null; then
    if ! gtimeout $TIMEOUT_SECONDS bash -c "$cmd" 2>&1 | tee -a "$LOG_FILE"; then
      local pipe_status="${PIPESTATUS[0]}"
      if [ "$pipe_status" -eq 124 ]; then
        log_error "Command timed out after ${TIMEOUT_SECONDS}s: $description"
      else
        log_error "Command failed: $description"
      fi
      return 1
    fi
  elif command -v timeout &>/dev/null; then
    if ! timeout $TIMEOUT_SECONDS bash -c "$cmd" 2>&1 | tee -a "$LOG_FILE"; then
      local pipe_status="${PIPESTATUS[0]}"
      if [ "$pipe_status" -eq 124 ]; then
        log_error "Command timed out after ${TIMEOUT_SECONDS}s: $description"
      else
        log_error "Command failed: $description"
      fi
      return 1
    fi
  else
    # timeoutコマンドなしで実行
    if ! bash -c "$cmd" 2>&1 | tee -a "$LOG_FILE"; then
      log_error "Command failed: $description"
      return 1
    fi
  fi

  log_success "$description completed"
  return 0
}

# ===== Frontend checks =====
run_frontend_checks() {
  log_info "Starting frontend checks..."

  cd "$PROJECT_ROOT" || return 1

  if [ ! -f "package.json" ]; then
    log_warning "package.json not found, skipping frontend checks"
    return 0
  fi

  # Frontend testsは任意（失敗しても続行）
  if ! run_with_timeout "pnpm test" "Frontend tests" 2>/dev/null; then
    log_warning "Frontend tests failed or not configured, continuing..."
  fi

  return 0
}

# ===== Backend checks =====
run_backend_checks() {
  log_info "Starting backend checks..."

  local backend_dir="$PROJECT_ROOT/backend"

  # ディレクトリ検証
  if ! verify_directory "$backend_dir" "backend"; then
    log_warning "Backend directory not found, skipping backend checks"
    return 0
  fi

  cd "$backend_dir" || return 1

  # venv存在チェック
  local venv_activate="$backend_dir/venv/bin/activate"
  if [ ! -f "$venv_activate" ]; then
    log_warning "venv not found, skipping backend checks"
    log_info "venv作成: cd backend && python3.13 -m venv venv && source venv/bin/activate && pip install -e .[dev]"
    return 0
  fi

  # venv整合性検証（警告のみ）
  verify_venv_integrity "$venv_activate" "$VENV_HASH_FILE" || true

  # venv有効化
  log_info "Activating venv..."
  # shellcheck disable=SC1090
  source "$venv_activate" || {
    log_error "Failed to activate venv"
    return 1
  }

  # ツールバージョン検証（警告のみ）
  verify_tool_version "black" "$REQUIRED_BLACK_VERSION" "black --version" || true
  verify_tool_version "ruff" "$REQUIRED_RUFF_VERSION" "ruff --version" || true

  # Black format check（必須）
  log_info "Running black format check..."
  if ! run_with_timeout "black --check src/ tests/" "Black format verification"; then
    log_error "Black format check failed"
    log_info "修正方法: cd backend && source venv/bin/activate && black src/ tests/"
    return 1
  fi

  # Ruff linting（必須）
  log_info "Running ruff linting..."
  if ! run_with_timeout "ruff check src/ tests/" "Ruff linting"; then
    log_error "Ruff linting failed"
    log_info "修正方法: cd backend && source venv/bin/activate && ruff check --fix src/ tests/"
    return 1
  fi

  # mypy type check（警告のみ - strict過ぎるため）
  log_info "Running mypy type check..."
  if ! run_with_timeout "mypy src/ --strict" "mypy strict type check" 2>/dev/null; then
    log_warning "mypy type check has warnings, continuing..."
  fi

  # venv無効化
  deactivate

  return 0
}

# ===== メイン処理 =====
main() {
  log_info "===== Pre-commit checks starting ====="
  log_info "Project root: $PROJECT_ROOT"
  log_info "Timestamp: $(date -u +%Y-%m-%dT%H:%M:%SZ)"

  # Frontend checks（失敗しても続行）
  run_frontend_checks || log_warning "Frontend checks had issues, continuing..."

  # Backend checks（失敗時は中止）
  run_backend_checks || exit 1

  log_success "===== All pre-commit checks passed ====="
  return 0
}

main "$@"
