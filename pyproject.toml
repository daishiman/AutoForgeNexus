[build-system]
requires = ["setuptools>=65.0", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "autoforge-nexus"
version = "1.0.0"
description = "AI プロンプト最適化システム - 包括的なプロンプトエンジニアリング支援プラットフォーム"
readme = "README.md"
license = {text = "MIT"}
authors = [
    {name = "AutoForgeNexus Team", email = "team@autoforgenexus.dev"}
]
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.13",
    "Topic :: Software Development :: Libraries :: Python Modules",
    "Topic :: Scientific/Engineering :: Artificial Intelligence",
]
requires-python = ">=3.13"
dependencies = [
    "fastapi[all]>=0.116.1",
    "uvicorn[standard]>=0.27.0",
    "sqlalchemy>=2.0.32",
    "alembic>=1.13.0",
    "pydantic>=2.6.0",
    "pydantic-settings>=2.2.0",
    "langchain>=0.3.27",
    "langgraph>=0.6.7",
    "litellm>=1.76.1",
    "langfuse>=2.55.0",
    "libsql-client>=0.3.0",
    "redis>=5.0.0",
    "httpx>=0.27.0",
    "python-multipart>=0.0.9",
    "python-jose[cryptography]>=3.3.0",
    "passlib[bcrypt]>=1.7.4",
    "celery[redis]>=5.4.0",
    "structlog>=24.1.0",
    "tenacity>=8.2.0",
    "prometheus-client>=0.20.0",
    "opentelemetry-api>=1.24.0",
    "opentelemetry-sdk>=1.24.0",
    "opentelemetry-instrumentation-fastapi>=0.45b0",
]

[project.optional-dependencies]
dev = [
    "pytest>=8.0.0",
    "pytest-asyncio>=0.23.0",
    "pytest-cov>=4.0.0",
    "pytest-mock>=3.12.0",
    "httpx>=0.27.0",
    "factory-boy>=3.3.0",
    "faker>=24.0.0",
    "testcontainers>=4.0.0",
]
lint = [
    "ruff>=0.3.0",
    "mypy>=1.8.0",
    "black>=24.0.0",
    "isort>=5.13.0",
    "bandit>=1.7.0",
    "safety>=3.0.0",
]
docs = [
    "mkdocs>=1.5.0",
    "mkdocs-material>=9.5.0",
    "mkdocstrings[python]>=0.24.0",
]

[project.urls]
Homepage = "https://github.com/daishiman/AutoForgeNexus"
Documentation = "https://autoforgenexus.dev/docs"
Repository = "https://github.com/daishiman/AutoForgeNexus"
Changelog = "https://github.com/daishiman/AutoForgeNexus/blob/main/CHANGELOG.md"

[tool.setuptools.packages.find]
where = ["backend/src"]

[tool.ruff]
target-version = "py313"
line-length = 88
select = [
    "E",  # pycodestyle errors
    "W",  # pycodestyle warnings
    "F",  # pyflakes
    "I",  # isort
    "B",  # flake8-bugbear
    "C4", # flake8-comprehensions
    "UP", # pyupgrade
    "ARG001", # unused-function-args
    "SIM", # flake8-simplify
    "TCH", # flake8-type-checking
    "TID", # flake8-tidy-imports
    "Q", # flake8-quotes
    "FLY", # flynt
    "PERF", # perflint
    "RUF", # ruff-specific rules
]
ignore = [
    "E501",  # line too long, handled by black
    "B008",  # do not perform function calls in argument defaults
    "C901",  # too complex
    "W191",  # indentation contains tabs
]
unfixable = ["B"]

[tool.ruff.per-file-ignores]
"__init__.py" = ["F401"]
"tests/**/*" = ["ARG", "FBT", "PLR2004", "S101", "TID252"]

[tool.ruff.isort]
known-first-party = ["autoforge_nexus"]
force-sort-within-sections = true

[tool.black]
line-length = 88
target-version = ['py313']
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | build
  | dist
)/
'''

[tool.mypy]
python_version = "3.13"
check_untyped_defs = true
disallow_any_generics = true
disallow_incomplete_defs = true
disallow_untyped_defs = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_return_any = true
strict_equality = true
warn_unreachable = true
show_error_context = true
show_column_numbers = true
show_error_codes = true

[[tool.mypy.overrides]]
module = [
    "langchain.*",
    "langgraph.*",
    "litellm.*",
    "langfuse.*",
    "libsql_client.*",
]
ignore_missing_imports = true

[tool.pytest.ini_options]
minversion = "8.0"
addopts = [
    "--strict-markers",
    "--strict-config",
    "--cov=autoforge_nexus",
    "--cov-report=term-missing",
    "--cov-report=html",
    "--cov-report=xml",
    "--cov-fail-under=80",
]
testpaths = ["tests"]
filterwarnings = [
    "error",
    "ignore::UserWarning",
    "ignore::DeprecationWarning",
]
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests",
    "unit: marks tests as unit tests",
]

[tool.coverage.run]
source = ["backend/src"]
omit = [
    "*/tests/*",
    "*/__pycache__/*",
    "*/venv/*",
    "*/migrations/*",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]