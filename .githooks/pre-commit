#!/bin/bash
# Pre-commit hook: „Ç≥„Éü„ÉÉ„ÉàÂâç„ÅÆÂìÅË≥™„ÉÅ„Çß„ÉÉ„ÇØ

set -e

echo "üîç Pre-commit checks starting..."

# 1. „Çπ„ÉÜ„Éº„Ç∏„É≥„Ç∞„Ç®„É™„Ç¢„ÅÆ„Éï„Ç°„Ç§„É´„Çí„ÉÅ„Çß„ÉÉ„ÇØ
STAGED_FILES=$(git diff --cached --name-only --diff-filter=ACM)

if [ -z "$STAGED_FILES" ]; then
    echo "‚ö†Ô∏è No files staged for commit"
    exit 0
fi

# 2. Python „Éï„Ç°„Ç§„É´„ÅÆ„ÉÅ„Çß„ÉÉ„ÇØ
PYTHON_FILES=$(echo "$STAGED_FILES" | grep -E '\.py$' || true)
if [ -n "$PYTHON_FILES" ]; then
    echo "üêç Checking Python files..."

    # Ruff„ÉÅ„Çß„ÉÉ„ÇØÔºàÂ≠òÂú®„Åô„ÇãÂ†¥ÂêàÔºâ
    if command -v ruff >/dev/null 2>&1; then
        echo "  Running Ruff linter..."
        ruff check $PYTHON_FILES || {
            echo "‚ùå Ruff check failed. Please fix errors before committing."
            echo "üí° Run 'ruff check --fix' to auto-fix some issues"
            exit 1
        }
    fi

    # Black„Éï„Ç©„Éº„Éû„ÉÉ„Éà„ÉÅ„Çß„ÉÉ„ÇØÔºàÂ≠òÂú®„Åô„ÇãÂ†¥ÂêàÔºâ
    if command -v black >/dev/null 2>&1; then
        echo "  Checking Black formatting..."
        black --check $PYTHON_FILES || {
            echo "‚ùå Black formatting check failed"
            echo "üí° Run 'black <files>' to format"
            exit 1
        }
    fi
fi

# 3. TypeScript/JavaScript „Éï„Ç°„Ç§„É´„ÅÆ„ÉÅ„Çß„ÉÉ„ÇØ
TS_JS_FILES=$(echo "$STAGED_FILES" | grep -E '\.(ts|tsx|js|jsx)$' || true)
if [ -n "$TS_JS_FILES" ]; then
    echo "üìò Checking TypeScript/JavaScript files..."

    # ESLint„ÉÅ„Çß„ÉÉ„ÇØÔºàÂ≠òÂú®„Åô„ÇãÂ†¥ÂêàÔºâ
    if [ -f "frontend/package.json" ] && [ -f "frontend/node_modules/.bin/eslint" ]; then
        echo "  Running ESLint..."
        (cd frontend && npx eslint $TS_JS_FILES) || {
            echo "‚ùå ESLint check failed"
            echo "üí° Run 'pnpm lint:fix' to auto-fix"
            exit 1
        }
    fi
fi

# 4. Â§ß„Åç„Å™„Éï„Ç°„Ç§„É´„ÅÆ„ÉÅ„Çß„ÉÉ„ÇØÔºà1MB‰ª•‰∏äÔºâ
for file in $STAGED_FILES; do
    file_size=$(stat -f%z "$file" 2>/dev/null || stat -c%s "$file" 2>/dev/null || echo 0)
    if [ "$file_size" -gt 1048576 ]; then
        echo "‚ö†Ô∏è Warning: $file is larger than 1MB ($(($file_size / 1024))KB)"
        read -p "Continue with large file? (y/n) " -n 1 -r
        echo
        if [[ ! $REPLY =~ ^[Yy]$ ]]; then
            exit 1
        fi
    fi
done

# 5. ÁßòÂØÜÊÉÖÂ†±„ÅÆÊºèÊ¥©„ÉÅ„Çß„ÉÉ„ÇØ
echo "üîê Checking for secrets..."
for file in $STAGED_FILES; do
    # API keys, tokens, passwords „ÅÆ„Éë„Çø„Éº„É≥„ÉÅ„Çß„ÉÉ„ÇØ
    if grep -qE '(api[_-]?key|apikey|secret|password|token|bearer|private[_-]?key)[\s]*[:=][\s]*["\047][^"\047]+["\047]' "$file" 2>/dev/null; then
        echo "‚ö†Ô∏è Potential secret found in $file"
        echo "Please review the file for sensitive information"
        read -p "Continue anyway? (y/n) " -n 1 -r
        echo
        if [[ ! $REPLY =~ ^[Yy]$ ]]; then
            exit 1
        fi
    fi

    # .env„Éï„Ç°„Ç§„É´„ÅÆ„Ç≥„Éü„ÉÉ„ÉàÈò≤Ê≠¢
    if [[ "$file" == *".env"* ]] && [[ "$file" != *".env.example"* ]]; then
        echo "‚ùå Error: Attempting to commit .env file: $file"
        echo "üí° Use .env.example for template files"
        exit 1
    fi
done

# 6. TODO/FIXME „ÉÅ„Çß„ÉÉ„ÇØ
TODO_COUNT=$(grep -n "TODO\|FIXME\|XXX" $STAGED_FILES 2>/dev/null | wc -l || echo 0)
if [ "$TODO_COUNT" -gt 0 ]; then
    echo "üìù Found $TODO_COUNT TODO/FIXME comments:"
    grep -n "TODO\|FIXME\|XXX" $STAGED_FILES 2>/dev/null | head -5 || true
    if [ "$TODO_COUNT" -gt 5 ]; then
        echo "   ... and $((TODO_COUNT - 5)) more"
    fi
fi

echo "‚úÖ Pre-commit checks passed!"