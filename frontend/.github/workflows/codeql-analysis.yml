name: CodeQL Security Analysis

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main]
    paths:
      - 'src/**/*.ts'
      - 'src/**/*.tsx'
      - 'src/**/*.js'
      - 'src/**/*.jsx'
  schedule:
    # 毎日午前4時（JST）にCodeQL分析実行
    - cron: '0 19 * * *'
  workflow_dispatch:
    inputs:
      language:
        description: '分析言語'
        required: true
        default: 'typescript'
        type: choice
        options:
          - typescript
          - javascript
      analysis_depth:
        description: '分析深度'
        required: true
        default: 'standard'
        type: choice
        options:
          - quick
          - standard
          - deep

# セキュリティ強化：CodeQL分析専用権限
permissions:
  actions: read
  contents: read
  security-events: write
  pull-requests: read

# 同時実行制御：リソース最適化
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: ${{ github.ref != 'refs/heads/main' }}

env:
  NODE_VERSION: '22'
  PNPM_VERSION: '9'

jobs:
  codeql-analyze:
    name: 🔍 CodeQL Security Analysis
    runs-on: ubuntu-latest
    timeout-minutes: 45

    strategy:
      fail-fast: false
      matrix:
        # TypeScript/JavaScriptのセキュリティ分析
        language: ['typescript']
        include:
          - language: typescript
            queries: security-extended

    steps:
      - name: Harden Runner
        uses: step-security/harden-runner@17d0e2bd7d51742c71671bd19fa12bdc9d40a3d6 # v2.8.1
        with:
          egress-policy: audit
          allowed-endpoints: >
            api.github.com:443
            github.com:443
            registry.npmjs.org:443
            uploads.github.com:443
            objects.githubusercontent.com:443

      - name: Checkout repository
        uses: actions/checkout@692973e3d937129bcbf40652eb9f2f61becf3332 # v4.1.7
        with:
          fetch-depth: 2
          persist-credentials: false

      # Node.js環境セットアップ（ビルド用）
      - name: Setup Node.js
        uses: actions/setup-node@1e60f620b9541d16bece96c5465dc8ee9832be0b # v4.0.3
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Setup pnpm
        uses: pnpm/action-setup@fe02b34f77f8bc703788d5817da081398fad5dd2 # v4.0.0
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: Get pnpm store directory
        shell: bash
        run: |
          echo "STORE_PATH=$(pnpm store path --silent)" >> $GITHUB_ENV

      - name: Setup pnpm cache
        uses: actions/cache@0c45773b623bea8c8e75f6c82b208c3cf94ea4f9 # v4.0.2
        with:
          path: ${{ env.STORE_PATH }}
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store-

      # 依存関係インストール（セキュア）
      - name: Install dependencies
        run: |
          # セキュアインストール
          pnpm install --frozen-lockfile --prefer-offline
        env:
          # npm audit有効化
          npm_config_audit: true
          npm_config_fund: false

      # CodeQL初期化
      - name: Initialize CodeQL
        uses: github/codeql-action/init@4fa2a7953630fd2f3fb380f21be14ede0169dd4f # v3.25.12
        with:
          languages: ${{ matrix.language }}
          queries: >
            security-extended,
            security-and-quality
          config: |
            name: "AutoForgeNexus CodeQL Config"
            queries:
              - name: security-extended
                uses: security-extended
              - name: security-and-quality
                uses: security-and-quality
            paths-ignore:
              - "**/node_modules/**"
              - "**/*.test.ts"
              - "**/*.test.tsx"
              - "**/tests/**"
              - "**/*.config.js"
              - "**/*.config.ts"
            paths:
              - "src/**"

      # TypeScript型チェック（コード品質向上）
      - name: TypeScript compilation check
        run: |
          echo "::group::TypeScript型チェック"
          pnpm type-check
          echo "::endgroup::"

      # Next.jsビルド（コード解析用）
      - name: Build application for analysis
        run: |
          echo "::group::分析用ビルド実行"
          pnpm build
          echo "::endgroup::"
        env:
          # 分析用環境設定
          NODE_ENV: production
          NEXT_TELEMETRY_DISABLED: 1
          # ソースマップ生成（詳細分析用）
          GENERATE_SOURCEMAP: true

      # CodeQL分析実行
      - name: Perform CodeQL Analysis
        uses: github/codeql-action/analyze@4fa2a7953630fd2f3fb380f21be14ede0169dd4f # v3.25.12
        with:
          category: "/language:${{ matrix.language }}"
          upload: true
          output: codeql-results
          # 詳細レポート生成
          format: 'sarif-latest'

  # カスタムセキュリティルールチェック
  custom-security-rules:
    name: 🛡️ Custom Security Rules
    runs-on: ubuntu-latest
    timeout-minutes: 15

    steps:
      - name: Harden Runner
        uses: step-security/harden-runner@17d0e2bd7d51742c71671bd19fa12bdc9d40a3d6 # v2.8.1
        with:
          egress-policy: audit

      - name: Checkout code
        uses: actions/checkout@692973e3d937129bcbf40652eb9f2f61becf3332 # v4.1.7
        with:
          persist-credentials: false

      # カスタムセキュリティパターン検索
      - name: Custom security pattern analysis
        run: |
          echo "::group::カスタムセキュリティパターン分析"

          # 危険なパターンの検出
          SECURITY_ISSUES=()

          # 1. XSS脆弱性パターン
          echo "XSS脆弱性パターンチェック..."
          if grep -r -n "dangerouslySetInnerHTML" src/ 2>/dev/null; then
            echo "::warning::dangerouslySetInnerHTMLの使用を検出"
            SECURITY_ISSUES+=("XSS")
          fi

          # 2. SQL Injection可能性
          echo "SQL Injection可能性チェック..."
          if grep -r -n -E "(query|execute).*\+.*user|user.*\+.*(query|execute)" src/ 2>/dev/null; then
            echo "::warning::SQL Injection可能性を検出"
            SECURITY_ISSUES+=("SQLi")
          fi

          # 3. ハードコードされた認証情報
          echo "ハードコードされた認証情報チェック..."
          if grep -r -n -E "(password|secret|key).*=.*['\"][a-zA-Z0-9]{8,}['\"]" src/ 2>/dev/null; then
            echo "::error::ハードコードされた認証情報を検出"
            SECURITY_ISSUES+=("HARDCODED_CREDS")
          fi

          # 4. 安全でないランダム値生成
          echo "安全でないランダム値生成チェック..."
          if grep -r -n "Math.random()" src/ 2>/dev/null; then
            echo "::warning::暗号学的に安全でないMath.random()を検出"
            SECURITY_ISSUES+=("WEAK_RANDOM")
          fi

          # 5. eval()の使用
          echo "eval()使用チェック..."
          if grep -r -n -E "\beval\(" src/ 2>/dev/null; then
            echo "::error::危険なeval()の使用を検出"
            SECURITY_ISSUES+=("EVAL_USAGE")
          fi

          # 6. 外部リソースの非セキュア読み込み
          echo "非セキュア外部リソースチェック..."
          if grep -r -n "http://" src/ 2>/dev/null | grep -v "localhost"; then
            echo "::warning::非HTTPSの外部リソース読み込みを検出"
            SECURITY_ISSUES+=("INSECURE_HTTP")
          fi

          # 7. 不適切なCORS設定
          echo "CORS設定チェック..."
          if grep -r -n "Access-Control-Allow-Origin.*\*" src/ 2>/dev/null; then
            echo "::warning::過度に緩いCORS設定を検出"
            SECURITY_ISSUES+=("LOOSE_CORS")
          fi

          # 8. console.log()に秘密情報
          echo "コンソール出力秘密情報チェック..."
          if grep -r -n -E "console\.(log|debug|info).*(\btoken\b|\bpassword\b|\bsecret\b|\bkey\b)" src/ 2>/dev/null; then
            echo "::warning::console出力に秘密情報の可能性"
            SECURITY_ISSUES+=("CONSOLE_SECRETS")
          fi

          # 結果サマリー
          if [ ${#SECURITY_ISSUES[@]} -eq 0 ]; then
            echo "::notice::カスタムセキュリティパターンで問題は検出されませんでした"
          else
            echo "::warning::検出されたセキュリティ問題: ${SECURITY_ISSUES[*]}"
          fi

          echo "::endgroup::"

  # OWASP ZAP動的分析（オプション）
  owasp-zap-scan:
    name: 🕷️ OWASP ZAP Dynamic Analysis
    runs-on: ubuntu-latest
    timeout-minutes: 20
    if: github.event_name == 'schedule' || github.event_name == 'workflow_dispatch'

    steps:
      - name: Harden Runner
        uses: step-security/harden-runner@17d0e2bd7d51742c71671bd19fa12bdc9d40a3d6 # v2.8.1
        with:
          egress-policy: audit

      - name: Checkout code
        uses: actions/checkout@692973e3d937129bcbf40652eb9f2f61becf3332 # v4.1.7
        with:
          persist-credentials: false

      - name: Setup Node.js
        uses: actions/setup-node@1e60f620b9541d16bece96c5465dc8ee9832be0b # v4.0.3
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Setup pnpm
        uses: pnpm/action-setup@fe02b34f77f8bc703788d5817da081398fad5dd2 # v4.0.0
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: Build and start application
        run: |
          pnpm install --frozen-lockfile
          pnpm build
          pnpm start &
          # アプリケーション起動待機
          sleep 30
        env:
          NODE_ENV: production
          PORT: 3000

      # OWASP ZAPベースライン스캔
      - name: OWASP ZAP Baseline Scan
        uses: zaproxy/action-baseline@c906f739897208ce2b4d6e65d0d6b9b48b31e3be # v0.12.0
        with:
          target: 'http://localhost:3000'
          rules_file_name: '.zap/rules.tsv'
          cmd_options: '-a -d -T 60'

      # ZAP結果の処理
      - name: Process ZAP results
        if: always()
        run: |
          if [ -f report_html.html ]; then
            echo "::notice::OWASP ZAP分析完了"
          else
            echo "::warning::OWASP ZAP分析結果が見つかりません"
          fi

      - name: Upload ZAP results
        if: always()
        uses: actions/upload-artifact@834a144ee995460fba8ed112a2fc961b36a5ec5a # v4.3.6
        with:
          name: zap-report-${{ github.run_id }}
          path: |
            report_html.html
            report_json.json
          retention-days: 30

  # セキュリティ分析レポート統合
  security-analysis-report:
    name: 📊 Security Analysis Report
    runs-on: ubuntu-latest
    needs: [codeql-analyze, custom-security-rules, owasp-zap-scan]
    if: always()

    steps:
      - name: Generate comprehensive security report
        run: |
          echo "### 🔍 包括的セキュリティ分析レポート" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**分析実行日時**: $(date -u '+%Y-%m-%d %H:%M:%S UTC')" >> $GITHUB_STEP_SUMMARY
          echo "**対象ブランチ**: ${{ github.ref_name }}" >> $GITHUB_STEP_SUMMARY
          echo "**トリガー**: ${{ github.event_name }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

          echo "## 🛡️ 分析結果サマリー" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "| 分析ツール | ステータス | 詳細 |" >> $GITHUB_STEP_SUMMARY
          echo "|------------|------------|------|" >> $GITHUB_STEP_SUMMARY
          echo "| CodeQL静的分析 | ${{ needs.codeql-analyze.result == 'success' && '✅ 合格' || '❌ 要対応' }} | セキュリティ脆弱性・品質問題 |" >> $GITHUB_STEP_SUMMARY
          echo "| カスタムルール | ${{ needs.custom-security-rules.result == 'success' && '✅ 合格' || '❌ 要対応' }} | XSS・SQLi・認証情報漏洩 |" >> $GITHUB_STEP_SUMMARY
          echo "| OWASP ZAP動的 | ${{ needs.owasp-zap-scan.result == 'success' && '✅ 合格' || needs.owasp-zap-scan.result == 'skipped' && '⏭️ スキップ' || '❌ 要対応' }} | 実行時脆弱性・設定問題 |" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

          # セキュリティ推奨事項
          echo "## 📋 セキュリティ推奨事項" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

          if [ "${{ needs.codeql-analyze.result }}" != "success" ]; then
            echo "### 🔴 CodeQL分析で問題検出" >> $GITHUB_STEP_SUMMARY
            echo "- セキュリティアドバイザリを確認してください" >> $GITHUB_STEP_SUMMARY
            echo "- [Security タブ](${{ github.server_url }}/${{ github.repository }}/security)で詳細を確認" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
          fi

          if [ "${{ needs.custom-security-rules.result }}" != "success" ]; then
            echo "### 🔴 カスタムセキュリティルールで問題検出" >> $GITHUB_STEP_SUMMARY
            echo "- XSS/SQLi対策を実施してください" >> $GITHUB_STEP_SUMMARY
            echo "- ハードコードされた認証情報を削除してください" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
          fi

          # 継続的改善
          echo "## 🔄 継続的セキュリティ改善" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "- **定期分析**: 毎日午前4時に自動実行" >> $GITHUB_STEP_SUMMARY
          echo "- **PRチェック**: すべてのPRで自動分析" >> $GITHUB_STEP_SUMMARY
          echo "- **依存関係監視**: 毎週火曜日に脆弱性チェック" >> $GITHUB_STEP_SUMMARY
          echo "- **OWASP ZAP**: スケジュール実行で動的分析" >> $GITHUB_STEP_SUMMARY

      # 重要な脆弱性でアラート生成
      - name: Critical security alert
        if: needs.codeql-analyze.result == 'failure'
        uses: actions/github-script@60a0d83039c74a4aee543508d2ffcb1c3799cdea # v7.0.1
        with:
          script: |
            github.rest.issues.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: '🚨 Critical Security Vulnerabilities - CodeQL Analysis',
              body: `## 🚨 重要なセキュリティ脆弱性が検出されました

              CodeQL分析により、セキュリティ上の重要な問題が発見されました。

              ## 📊 分析詳細

              - **実行日時**: ${new Date().toISOString()}
              - **対象ブランチ**: \`${{ github.ref_name }}\`
              - **コミット**: ${{ github.sha }}

              ## 🔍 確認箇所

              - [Security タブ](${context.payload.repository.html_url}/security) でCodeQL分析結果を確認
              - [Actions](${context.payload.repository.html_url}/actions/runs/${context.runId}) で詳細ログを確認

              ## ⚡ 緊急対応が必要

              - [ ] **Critical**: 24時間以内に対応
              - [ ] **High**: 72時間以内に対応
              - [ ] **Medium**: 1週間以内に対応

              ## 📋 対応手順

              1. Security タブで脆弱性詳細を確認
              2. 影響範囲と攻撃可能性を評価
              3. 修正パッチを作成・テスト
              4. 緊急デプロイまたは定期リリースで対応

              ---
              🤖 自動生成アラート - セキュリティチーム即座対応必須
              `,
              labels: ['security', 'critical', 'codeql', 'vulnerability']
            });

            // チーム通知（Slack/Discord等との連携用）
            console.log('🚨 Critical security vulnerabilities detected - immediate attention required');

      # セキュリティメトリクス追跡
      - name: Security metrics tracking
        run: |
          echo "## 📈 セキュリティメトリクス" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "| メトリクス | 値 | トレンド |" >> $GITHUB_STEP_SUMMARY
          echo "|------------|-----|----------|" >> $GITHUB_STEP_SUMMARY
          echo "| セキュリティ分析 | ${{ needs.codeql-analyze.result == 'success' && '0' || '1+' }} issues | ${{ needs.codeql-analyze.result == 'success' && '📈 改善' || '📉 要注意' }} |" >> $GITHUB_STEP_SUMMARY
          echo "| カスタムルール | ${{ needs.custom-security-rules.result == 'success' && '0' || '1+' }} warnings | ${{ needs.custom-security-rules.result == 'success' && '📈 良好' || '📉 要改善' }} |" >> $GITHUB_STEP_SUMMARY
          echo "| 動的分析 | ${{ needs.owasp-zap-scan.result == 'success' && '実行済み' || needs.owasp-zap-scan.result == 'skipped' && 'スキップ' || '要確認' }} | 定期実行 |" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**セキュリティスコア**: ${{ needs.codeql-analyze.result == 'success' && needs.custom-security-rules.result == 'success' && 'A+' || 'B 要改善' }}" >> $GITHUB_STEP_SUMMARY