name: Security Audit - OWASP & Compliance

on:
  schedule:
    # 毎週月曜日午前3時（JST）に包括的セキュリティ監査実行
    - cron: '0 18 * * 1'
  push:
    branches: [main]
    paths:
      - 'package.json'
      - 'pnpm-lock.yaml'
      - '.github/workflows/security-audit.yml'
  pull_request:
    branches: [main]
    paths:
      - 'package.json'
      - 'pnpm-lock.yaml'
  workflow_dispatch:
    inputs:
      audit_level:
        description: '監査レベル'
        required: true
        default: 'comprehensive'
        type: choice
        options:
          - basic
          - comprehensive
          - critical-only
      include_license_check:
        description: 'ライセンス監査を含める'
        required: false
        default: true
        type: boolean

# セキュリティ強化：最小権限設定
permissions:
  contents: read
  security-events: write
  actions: read
  issues: write # 脆弱性Issue自動作成用
  pull-requests: write

# 環境変数：セキュリティ設定
env:
  NODE_VERSION: '22'
  PNPM_VERSION: '9'
  # セキュリティスキャナ設定
  TRIVY_SEVERITY: 'CRITICAL,HIGH,MEDIUM'
  SNYK_SEVERITY_THRESHOLD: 'medium'

jobs:
  # 依存関係脆弱性スキャン
  dependency-vulnerability-scan:
    name: 🔍 Dependency Vulnerability Analysis
    runs-on: ubuntu-latest
    timeout-minutes: 20

    strategy:
      matrix:
        scanner: [trivy, snyk, npm-audit]
      fail-fast: false

    steps:
      - name: Harden Runner
        uses: step-security/harden-runner@17d0e2bd7d51742c71671bd19fa12bdc9d40a3d6 # v2.8.1
        with:
          egress-policy: audit
          allowed-endpoints: >
            api.github.com:443
            github.com:443
            registry.npmjs.org:443
            api.snyk.io:443
            *.githubusercontent.com:443

      - name: Checkout code
        uses: actions/checkout@692973e3d937129bcbf40652eb9f2f61becf3332 # v4.1.7
        with:
          fetch-depth: 0
          persist-credentials: false

      - name: Setup Node.js
        uses: actions/setup-node@1e60f620b9541d16bece96c5465dc8ee9832be0b # v4.0.3
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Setup pnpm
        uses: pnpm/action-setup@fe02b34f77f8bc703788d5817da081398fad5dd2 # v4.0.0
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      # Trivy脆弱性スキャン
      - name: Trivy vulnerability scan
        if: matrix.scanner == 'trivy'
        uses: aquasecurity/trivy-action@7c2007bcb556501da015201bcba5aa14069b74e2 # v0.23.0
        with:
          scan-type: 'fs'
          scan-ref: '.'
          format: 'sarif'
          output: 'trivy-results.sarif'
          severity: ${{ env.TRIVY_SEVERITY }}
          ignore-unfixed: false

      - name: Upload Trivy results
        if: matrix.scanner == 'trivy'
        uses: github/codeql-action/upload-sarif@4fa2a7953630fd2f3fb380f21be14ede0169dd4f # v3.25.12
        with:
          sarif_file: 'trivy-results.sarif'

      # Snyk脆弱性スキャン
      - name: Snyk vulnerability scan
        if: matrix.scanner == 'snyk'
        uses: snyk/actions/node@b98d498629f1c368650479d5233ed5f57f8a9edc # v0.4.0
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        with:
          args: --severity-threshold=${{ env.SNYK_SEVERITY_THRESHOLD }} --json-file-output=snyk-results.json

      - name: Upload Snyk results
        if: matrix.scanner == 'snyk' && always()
        uses: github/codeql-action/upload-sarif@4fa2a7953630fd2f3fb380f21be14ede0169dd4f # v3.25.12
        with:
          sarif_file: snyk-results.sarif

      # npm audit詳細分析
      - name: npm audit comprehensive scan
        if: matrix.scanner == 'npm-audit'
        run: |
          echo "::group::npm audit包括的分析"

          # 詳細監査実行
          pnpm audit --json > npm-audit-results.json || true

          # 結果分析
          if [ -f npm-audit-results.json ]; then
            # 重要度別カウント
            CRITICAL=$(jq -r '.vulnerabilities | to_entries[] | select(.value.severity == "critical") | .key' npm-audit-results.json 2>/dev/null | wc -l || echo "0")
            HIGH=$(jq -r '.vulnerabilities | to_entries[] | select(.value.severity == "high") | .key' npm-audit-results.json 2>/dev/null | wc -l || echo "0")
            MODERATE=$(jq -r '.vulnerabilities | to_entries[] | select(.value.severity == "moderate") | .key' npm-audit-results.json 2>/dev/null | wc -l || echo "0")

            echo "脆弱性サマリー:"
            echo "- Critical: $CRITICAL"
            echo "- High: $HIGH"
            echo "- Moderate: $MODERATE"

            # Critical脆弱性がある場合はワークフロー失敗
            if [ "$CRITICAL" -gt 0 ]; then
              echo "::error::Critical脆弱性が$CRITICAL件検出されました"
              exit 1
            fi

            # High脆弱性の警告
            if [ "$HIGH" -gt 0 ]; then
              echo "::warning::High脆弱性が$HIGH件検出されました"
            fi
          fi

          echo "::endgroup::"

      # 監査結果をアーティファクトとして保存
      - name: Upload scan results
        if: always()
        uses: actions/upload-artifact@834a144ee995460fba8ed112a2fc961b36a5ec5a # v4.3.6
        with:
          name: security-scan-${{ matrix.scanner }}-${{ github.run_id }}
          path: |
            *-results.json
            *-results.sarif
          retention-days: 90

  # コードセキュリティ分析
  code-security-analysis:
    name: 📊 Code Security Analysis
    runs-on: ubuntu-latest
    timeout-minutes: 15

    steps:
      - name: Harden Runner
        uses: step-security/harden-runner@17d0e2bd7d51742c71671bd19fa12bdc9d40a3d6 # v2.8.1
        with:
          egress-policy: audit

      - name: Checkout code
        uses: actions/checkout@692973e3d937129bcbf40652eb9f2f61becf3332 # v4.1.7
        with:
          persist-credentials: false

      - name: Setup Node.js
        uses: actions/setup-node@1e60f620b9541d16bece96c5465dc8ee9832be0b # v4.0.3
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Setup pnpm
        uses: pnpm/action-setup@fe02b34f77f8bc703788d5817da081398fad5dd2 # v4.0.0
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      # ESLintセキュリティプラグイン
      - name: ESLint security analysis
        run: |
          echo "::group::ESLintセキュリティ分析"

          # セキュリティ特化のESLint実行
          pnpm lint --ext .ts,.tsx,.js,.jsx \
            --format @microsoft/eslint-formatter-sarif \
            --output-file eslint-security.sarif \
            src/ || true

          # セキュリティ関連の警告・エラー抽出
          if [ -f eslint-security.sarif ]; then
            echo "ESLintセキュリティ分析完了"
          fi

          echo "::endgroup::"

      - name: Upload ESLint security results
        if: always()
        uses: github/codeql-action/upload-sarif@4fa2a7953630fd2f3fb380f21be14ede0169dd4f # v3.25.12
        with:
          sarif_file: eslint-security.sarif

      # 秘密情報漏洩検出（TruffleHog）
      - name: Secret leak detection
        run: |
          echo "::group::秘密情報漏洩検出"

          # 一般的な秘密情報パターン検索
          SECRET_PATTERNS=(
            "api[_-]?key.*=.*['\"][a-zA-Z0-9]{20,}['\"]"
            "secret.*=.*['\"][a-zA-Z0-9]{20,}['\"]"
            "password.*=.*['\"][a-zA-Z0-9]{8,}['\"]"
            "token.*=.*['\"][a-zA-Z0-9]{20,}['\"]"
            "private[_-]?key.*=.*['\"].*['\"]"
          )

          echo "秘密情報パターン検索中..."
          for pattern in "${SECRET_PATTERNS[@]}"; do
            if grep -r -i -E "$pattern" src/ 2>/dev/null; then
              echo "::error::潜在的な秘密情報を検出: $pattern"
              SECRETS_FOUND=true
            fi
          done

          # AWS/GCPキーパターン
          if grep -r -E "(AKIA[0-9A-Z]{16}|AIza[0-9A-Za-z-_]{35})" src/ 2>/dev/null; then
            echo "::error::AWSまたはGCPキーを検出しました"
            SECRETS_FOUND=true
          fi

          if [ "$SECRETS_FOUND" = "true" ]; then
            echo "::warning::コード内に秘密情報の可能性があります。レビューしてください。"
          else
            echo "::notice::秘密情報は検出されませんでした"
          fi

          echo "::endgroup::"

  # ライセンス監査
  license-compliance-audit:
    name: 📋 License Compliance Audit
    runs-on: ubuntu-latest
    timeout-minutes: 10
    if: inputs.include_license_check != false

    steps:
      - name: Harden Runner
        uses: step-security/harden-runner@17d0e2bd7d51742c71671bd19fa12bdc9d40a3d6 # v2.8.1
        with:
          egress-policy: audit

      - name: Checkout code
        uses: actions/checkout@692973e3d937129bcbf40652eb9f2f61becf3332 # v4.1.7
        with:
          persist-credentials: false

      - name: Setup Node.js
        uses: actions/setup-node@1e60f620b9541d16bece96c5465dc8ee9832be0b # v4.0.3
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Setup pnpm
        uses: pnpm/action-setup@fe02b34f77f8bc703788d5817da081398fad5dd2 # v4.0.0
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      # ライセンス監査
      - name: License compliance check
        run: |
          echo "::group::ライセンス監査"

          # 許可されたライセンス一覧
          ALLOWED_LICENSES=(
            "MIT"
            "BSD-2-Clause"
            "BSD-3-Clause"
            "Apache-2.0"
            "ISC"
            "0BSD"
            "Unlicense"
          )

          echo "依存関係ライセンス分析中..."
          pnpm licenses list --json > licenses.json

          # 禁止ライセンスチェック
          FORBIDDEN_LICENSES=(
            "GPL-2.0"
            "GPL-3.0"
            "AGPL"
            "LGPL"
            "SSPL"
            "BUSL"
          )

          echo "禁止ライセンスチェック..."
          for license in "${FORBIDDEN_LICENSES[@]}"; do
            if grep -i "$license" licenses.json 2>/dev/null; then
              echo "::error::禁止ライセンス検出: $license"
              FORBIDDEN_FOUND=true
            fi
          done

          if [ "$FORBIDDEN_FOUND" = "true" ]; then
            echo "::error::ライセンス違反が検出されました"
            exit 1
          fi

          # ライセンス不明パッケージチェック
          if grep -i "unknown\|unlicensed\|null" licenses.json 2>/dev/null; then
            echo "::warning::ライセンス不明のパッケージが存在します"
          fi

          echo "::notice::ライセンス監査完了"
          echo "::endgroup::"

      - name: Upload license report
        uses: actions/upload-artifact@834a144ee995460fba8ed112a2fc961b36a5ec5a # v4.3.6
        with:
          name: license-report-${{ github.run_id }}
          path: licenses.json
          retention-days: 365

  # 設定セキュリティ監査
  configuration-security-audit:
    name: ⚙️ Configuration Security Audit
    runs-on: ubuntu-latest
    timeout-minutes: 10

    steps:
      - name: Harden Runner
        uses: step-security/harden-runner@17d0e2bd7d51742c71671bd19fa12bdc9d40a3d6 # v2.8.1
        with:
          egress-policy: audit

      - name: Checkout code
        uses: actions/checkout@692973e3d937129bcbf40652eb9f2f61becf3332 # v4.1.7
        with:
          persist-credentials: false

      # Next.js設定セキュリティチェック
      - name: Next.js configuration security
        run: |
          echo "::group::Next.js設定セキュリティ監査"

          if [ -f next.config.js ]; then
            echo "Next.js設定ファイルをチェック中..."

            # セキュアな設定の確認
            if grep -q "headers.*X-Frame-Options\|headers.*X-Content-Type-Options" next.config.js; then
              echo "✅ セキュリティヘッダー設定済み"
            else
              echo "⚠️ セキュリティヘッダーが設定されていません"
            fi

            # 危険な設定の検出
            if grep -q "dangerouslyAllowBuildTimeOptimizations\|experimentalUnsafe" next.config.js; then
              echo "::warning::実験的または危険な設定が検出されました"
            fi

            # 開発専用設定の本番環境チェック
            if grep -q "webpack.*mode.*development" next.config.js; then
              echo "::warning::開発モード設定が本番設定に含まれています"
            fi
          fi

          echo "::endgroup::"

      # TypeScript設定セキュリティチェック
      - name: TypeScript configuration security
        run: |
          echo "::group::TypeScript設定セキュリティ監査"

          if [ -f tsconfig.json ]; then
            echo "TypeScript設定をチェック中..."

            # strict mode確認
            if grep -q '"strict".*true' tsconfig.json; then
              echo "✅ Strictモード有効"
            else
              echo "⚠️ Strictモードが無効化されています"
            fi

            # 危険な設定確認
            if grep -q '"skipLibCheck".*true\|"suppressImplicitAnyIndexErrors".*true' tsconfig.json; then
              echo "::warning::型チェックが緩和されています"
            fi
          fi

          echo "::endgroup::"

      # パッケージ.json設定監査
      - name: Package.json security audit
        run: |
          echo "::group::package.json設定監査"

          if [ -f package.json ]; then
            # scripts内の危険なコマンドチェック
            if grep -q '"postinstall"\|"preinstall"' package.json; then
              echo "::warning::pre/postinstallスクリプトが設定されています"
            fi

            # 開発依存関係の本番含有チェック
            if jq -r '.dependencies | keys[]' package.json | grep -E "(nodemon|webpack-dev|@types/)" 2>/dev/null; then
              echo "::warning::開発用パッケージが本番依存関係に含まれています"
            fi

            echo "✅ package.json監査完了"
          fi

          echo "::endgroup::"

  # 脆弱性レポート統合
  security-report-integration:
    name: 📈 Security Report Integration
    runs-on: ubuntu-latest
    needs: [dependency-vulnerability-scan, code-security-analysis, license-compliance-audit, configuration-security-audit]
    if: always()

    steps:
      - name: Download all scan results
        uses: actions/download-artifact@fa0a91b85d4f404e444e00e005971372dc801d16 # v4.1.8
        with:
          path: scan-results

      # 包括的セキュリティレポート生成
      - name: Generate comprehensive security report
        run: |
          echo "### 🔒 包括的セキュリティ監査レポート" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**監査実行日時**: $(date -u '+%Y-%m-%d %H:%M:%S UTC')" >> $GITHUB_STEP_SUMMARY
          echo "**監査レベル**: ${{ inputs.audit_level || 'comprehensive' }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

          echo "## 監査結果サマリー" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "| カテゴリ | ステータス | 詳細 |" >> $GITHUB_STEP_SUMMARY
          echo "|----------|------------|------|" >> $GITHUB_STEP_SUMMARY
          echo "| 依存関係脆弱性 | ${{ needs.dependency-vulnerability-scan.result == 'success' && '✅ 合格' || '❌ 要対応' }} | Trivy + Snyk + npm audit |" >> $GITHUB_STEP_SUMMARY
          echo "| コードセキュリティ | ${{ needs.code-security-analysis.result == 'success' && '✅ 合格' || '❌ 要対応' }} | ESLint + 秘密情報検出 |" >> $GITHUB_STEP_SUMMARY
          echo "| ライセンス監査 | ${{ needs.license-compliance-audit.result == 'success' && '✅ 合格' || needs.license-compliance-audit.result == 'skipped' && '⏭️ スキップ' || '❌ 要対応' }} | 禁止ライセンス + 不明ライセンス |" >> $GITHUB_STEP_SUMMARY
          echo "| 設定監査 | ${{ needs.configuration-security-audit.result == 'success' && '✅ 合格' || '❌ 要対応' }} | Next.js + TypeScript + package.json |" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

          # 推奨アクション
          echo "## 推奨アクション" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

          if [ "${{ needs.dependency-vulnerability-scan.result }}" != "success" ]; then
            echo "- 🔴 **依存関係脆弱性**: 検出された脆弱性を修正してください" >> $GITHUB_STEP_SUMMARY
          fi

          if [ "${{ needs.code-security-analysis.result }}" != "success" ]; then
            echo "- 🔴 **コードセキュリティ**: ESLintエラーまたは秘密情報を修正してください" >> $GITHUB_STEP_SUMMARY
          fi

          if [ "${{ needs.license-compliance-audit.result }}" != "success" ] && [ "${{ needs.license-compliance-audit.result }}" != "skipped" ]; then
            echo "- 🔴 **ライセンス違反**: 禁止ライセンスのパッケージを置換してください" >> $GITHUB_STEP_SUMMARY
          fi

          if [ "${{ needs.configuration-security-audit.result }}" != "success" ]; then
            echo "- 🔴 **設定セキュリティ**: セキュリティ設定を強化してください" >> $GITHUB_STEP_SUMMARY
          fi

          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**次回監査**: 毎週月曜日午前3時（JST）に自動実行" >> $GITHUB_STEP_SUMMARY

      # 重要な脆弱性でIssue自動作成
      - name: Create security issue
        if: needs.dependency-vulnerability-scan.result == 'failure'
        uses: actions/github-script@60a0d83039c74a4aee543508d2ffcb1c3799cdea # v7.0.1
        with:
          script: |
            github.rest.issues.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: '🚨 Critical Security Vulnerabilities Detected',
              body: `## セキュリティ脆弱性検出

              このIssueは自動的に作成されました。

              **検出日時**: ${new Date().toISOString()}
              **ワークフロー**: ${context.workflow}
              **実行ID**: ${context.runId}

              ## 対応が必要な項目

              - [ ] 依存関係脆弱性の修正
              - [ ] セキュリティスキャン結果の確認
              - [ ] パッケージアップデート

              ## 参考リンク

              - [ワークフロー実行](${context.payload.repository.html_url}/actions/runs/${context.runId})
              - [セキュリティアドバイザリ](${context.payload.repository.html_url}/security/advisories)

              ## 期限

              **Critical脆弱性**: 72時間以内
              **High脆弱性**: 1週間以内
              `,
              labels: ['security', 'vulnerability', 'critical']
            });