"""Initial schema: prompts and evaluations (DDD compliant)

Revision ID: fbaa8f944a75
Revises:
Create Date: 2025-09-30 15:10:37.160745

"""

from collections.abc import Sequence

import sqlalchemy as sa

from alembic import op

# revision identifiers, used by Alembic.
revision: str = "fbaa8f944a75"
down_revision: str | None = None
branch_labels: str | Sequence[str] | None = None
depends_on: str | Sequence[str] | None = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table(
        "prompt_templates",
        sa.Column("id", sa.String(length=36), nullable=False, comment="テンプレートID（UUID）"),
        sa.Column(
            "name",
            sa.String(length=255),
            nullable=False,
            comment="テンプレート名（一意）",
        ),
        sa.Column("description", sa.Text(), nullable=True, comment="テンプレート説明"),
        sa.Column(
            "template",
            sa.Text(),
            nullable=False,
            comment="テンプレート本文（変数埋め込み可能）",
        ),
        sa.Column("variables", sa.JSON(), nullable=False, comment="変数定義（JSON形式）"),
        sa.Column("category", sa.String(length=100), nullable=False, comment="カテゴリ"),
        sa.Column("usage_count", sa.Integer(), nullable=False, comment="使用回数"),
        sa.Column(
            "created_at",
            sa.DateTime(timezone=True),
            server_default=sa.text("(CURRENT_TIMESTAMP)"),
            nullable=False,
            comment="作成日時",
        ),
        sa.Column(
            "updated_at",
            sa.DateTime(timezone=True),
            server_default=sa.text("(CURRENT_TIMESTAMP)"),
            nullable=False,
            comment="更新日時",
        ),
        sa.PrimaryKeyConstraint("id"),
        sa.UniqueConstraint("name"),
    )
    op.create_index(
        "idx_templates_category", "prompt_templates", ["category"], unique=False
    )
    op.create_index(
        "idx_templates_usage", "prompt_templates", ["usage_count"], unique=False
    )
    op.create_table(
        "prompts",
        sa.Column("id", sa.String(length=36), nullable=False, comment="プロンプトID（UUID）"),
        sa.Column("title", sa.String(length=255), nullable=False, comment="プロンプトタイトル"),
        sa.Column("description", sa.Text(), nullable=True, comment="プロンプト説明"),
        sa.Column("content", sa.Text(), nullable=False, comment="プロンプト本文"),
        sa.Column("system_message", sa.Text(), nullable=True, comment="システムメッセージ"),
        sa.Column("tags", sa.JSON(), nullable=True, comment="タグ（JSON形式）"),
        sa.Column("meta_data", sa.JSON(), nullable=True, comment="メタデータ（JSON形式）"),
        sa.Column("version", sa.Integer(), nullable=False, comment="バージョン番号"),
        sa.Column(
            "parent_id",
            sa.String(length=36),
            nullable=True,
            comment="親プロンプトID（バージョン管理用）",
        ),
        sa.Column(
            "user_id",
            sa.String(length=255),
            nullable=False,
            comment="作成ユーザーID（Clerk UUID）",
        ),
        sa.Column(
            "status",
            sa.String(length=50),
            nullable=False,
            comment="ステータス: draft, active, archived",
        ),
        sa.Column(
            "created_at",
            sa.DateTime(timezone=True),
            server_default=sa.text("(CURRENT_TIMESTAMP)"),
            nullable=False,
            comment="作成日時",
        ),
        sa.Column(
            "updated_at",
            sa.DateTime(timezone=True),
            server_default=sa.text("(CURRENT_TIMESTAMP)"),
            nullable=False,
            comment="更新日時",
        ),
        sa.Column(
            "deleted_at",
            sa.DateTime(timezone=True),
            nullable=True,
            comment="削除日時（論理削除）",
        ),
        sa.ForeignKeyConstraint(
            ["parent_id"],
            ["prompts.id"],
        ),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_index("idx_prompts_created_at", "prompts", ["created_at"], unique=False)
    op.create_index("idx_prompts_deleted_at", "prompts", ["deleted_at"], unique=False)
    op.create_index("idx_prompts_parent_id", "prompts", ["parent_id"], unique=False)
    op.create_index("idx_prompts_status", "prompts", ["status"], unique=False)
    op.create_index("idx_prompts_user_id", "prompts", ["user_id"], unique=False)
    op.create_table(
        "evaluations",
        sa.Column("id", sa.String(length=36), nullable=False, comment="評価ID（UUID）"),
        sa.Column(
            "prompt_id",
            sa.String(length=36),
            nullable=False,
            comment="評価対象プロンプトID",
        ),
        sa.Column(
            "test_suite_id",
            sa.String(length=36),
            nullable=True,
            comment="テストスイートID",
        ),
        sa.Column(
            "status",
            sa.String(length=50),
            nullable=False,
            comment="実行ステータス: pending, running, completed, failed",
        ),
        sa.Column("overall_score", sa.Float(), nullable=True, comment="総合スコア（0.0-1.0）"),
        sa.Column("metrics", sa.JSON(), nullable=True, comment="評価メトリクス（JSON形式）"),
        sa.Column(
            "execution_time_ms",
            sa.Integer(),
            nullable=True,
            comment="実行時間（ミリ秒）",
        ),
        sa.Column(
            "provider",
            sa.String(length=100),
            nullable=True,
            comment="LLMプロバイダー（openai, anthropic等）",
        ),
        sa.Column(
            "model",
            sa.String(length=100),
            nullable=True,
            comment="使用モデル（gpt-4, claude-3等）",
        ),
        sa.Column("error_message", sa.Text(), nullable=True, comment="エラーメッセージ"),
        sa.Column(
            "created_at",
            sa.DateTime(timezone=True),
            server_default=sa.text("(CURRENT_TIMESTAMP)"),
            nullable=False,
            comment="作成日時",
        ),
        sa.Column(
            "updated_at",
            sa.DateTime(timezone=True),
            server_default=sa.text("(CURRENT_TIMESTAMP)"),
            nullable=False,
            comment="更新日時",
        ),
        sa.ForeignKeyConstraint(["prompt_id"], ["prompts.id"], ondelete="CASCADE"),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_index(
        "idx_evaluations_created_at", "evaluations", ["created_at"], unique=False
    )
    op.create_index(
        "idx_evaluations_prompt_id", "evaluations", ["prompt_id"], unique=False
    )
    op.create_index(
        "idx_evaluations_provider_model",
        "evaluations",
        ["provider", "model"],
        unique=False,
    )
    op.create_index("idx_evaluations_status", "evaluations", ["status"], unique=False)
    op.create_table(
        "test_results",
        sa.Column("id", sa.String(length=36), nullable=False, comment="テスト結果ID（UUID）"),
        sa.Column(
            "evaluation_id", sa.String(length=36), nullable=False, comment="所属評価ID"
        ),
        sa.Column(
            "test_case_name",
            sa.String(length=255),
            nullable=False,
            comment="テストケース名",
        ),
        sa.Column("input_data", sa.JSON(), nullable=False, comment="入力データ（JSON形式）"),
        sa.Column("expected_output", sa.Text(), nullable=True, comment="期待される出力"),
        sa.Column("actual_output", sa.Text(), nullable=False, comment="実際の出力"),
        sa.Column("score", sa.Float(), nullable=False, comment="スコア（0.0-1.0）"),
        sa.Column("passed", sa.Boolean(), nullable=False, comment="合格フラグ"),
        sa.Column(
            "latency_ms",
            sa.Integer(),
            nullable=False,
            comment="レスポンス時間（ミリ秒）",
        ),
        sa.Column("token_count", sa.Integer(), nullable=True, comment="使用トークン数"),
        sa.Column("cost_usd", sa.Float(), nullable=True, comment="実行コスト（USD）"),
        sa.Column(
            "created_at",
            sa.DateTime(timezone=True),
            server_default=sa.text("(CURRENT_TIMESTAMP)"),
            nullable=False,
            comment="作成日時",
        ),
        sa.Column(
            "updated_at",
            sa.DateTime(timezone=True),
            server_default=sa.text("(CURRENT_TIMESTAMP)"),
            nullable=False,
            comment="更新日時",
        ),
        sa.ForeignKeyConstraint(
            ["evaluation_id"], ["evaluations.id"], ondelete="CASCADE"
        ),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_index(
        "idx_test_results_evaluation_id",
        "test_results",
        ["evaluation_id"],
        unique=False,
    )
    op.create_index("idx_test_results_passed", "test_results", ["passed"], unique=False)
    op.create_index("idx_test_results_score", "test_results", ["score"], unique=False)
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_index("idx_test_results_score", table_name="test_results")
    op.drop_index("idx_test_results_passed", table_name="test_results")
    op.drop_index("idx_test_results_evaluation_id", table_name="test_results")
    op.drop_table("test_results")
    op.drop_index("idx_evaluations_status", table_name="evaluations")
    op.drop_index("idx_evaluations_provider_model", table_name="evaluations")
    op.drop_index("idx_evaluations_prompt_id", table_name="evaluations")
    op.drop_index("idx_evaluations_created_at", table_name="evaluations")
    op.drop_table("evaluations")
    op.drop_index("idx_prompts_user_id", table_name="prompts")
    op.drop_index("idx_prompts_status", table_name="prompts")
    op.drop_index("idx_prompts_parent_id", table_name="prompts")
    op.drop_index("idx_prompts_deleted_at", table_name="prompts")
    op.drop_index("idx_prompts_created_at", table_name="prompts")
    op.drop_table("prompts")
    op.drop_index("idx_templates_usage", table_name="prompt_templates")
    op.drop_index("idx_templates_category", table_name="prompt_templates")
    op.drop_table("prompt_templates")
    # ### end Alembic commands ###
